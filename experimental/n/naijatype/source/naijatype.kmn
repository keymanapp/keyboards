c Physical keyboard uses ; key to transform.
c Touch keyboard uses long press on related letters.
c Comma to left of space bar + Emoji. Removed capitals on long press default keyboard.
c Note we need to output K_ keys on punctuation with appropriate modifier keys held down to make sure the key runs through the Keyman Layout rules and converts space + ? into ? + space. This makes it handle the automatic space put in at the end of predictive texting better.
c
c Added small capital I.
c Restored the globe language menu but moved it left.
c Custom CSS styling to try to match the less cluttered Google look.
c Added / to punctuation. Stopped . doing shift until after a space.
c Added more language codes
c Fixed JDM issues: not changing to default after some longpress shift letters.
c Styling for iOS added.
c v26 Added nasal vowels in touch
c v27 Added languages
c v28 Added ʉɄ option for 10 vowel languages and did a major overhaul of the whole physical keyboard so that it rotates between single character and combining underlined/underdotted reliably.
c v29 Corrected oversight (bug) which didn't allow tone on underline and underdot letters.
c v30 Type kbv or version; to show the keyboard version.
c v31-33 Corrected behaviour of ? and ! and updated to match App version number for Google Play
c v34 Layout changed to make space bar bigger and avoid pressing full stop.
c v35-36 KAB package version bump. (Couldn't reproduce NaijaType eating returns after full stops.)
c v37 Change double space behaviour (allow lots of spaces again not turning all into full stop then space), and fix bug that stopped enter working in some contexts after a full stop.
c Small caps mode (Experimental): Double = to start small caps mode and same again to turn it off. It also turns off after a hyphen or space.
c v38 Saltillo (letter-like apostrophe) added
c v39 Added more BCP 47 languages to package, tweaked icon for visibility
c v40 Using the new Keyman 15 start of sentence detection, improved welcome docs
c v41 Moved Naira left and stay on numeric layer, joined Hash inside it, and added space bar. Reduced unnecessary longpress items. Added more currency symbols in numeric layer. Added s underdot in touch. Added Tugbiri, Kanuri, Igala languages. Small caps mode not turned off on hyphen or space any more.
c v42 Added small caps Q and Z (supported by 2022 Andika and Gentium fonts) and updated the character generating ods file to also show unicode names.
c v43 Built with a new generator ods file for all the most crucial stores.
c v44 Added saltillo and modifier letter vertical bar as well as upside down question mark and exclamation mark to rotas for ' ? !
c v45 ? gives vertical line fist then saltillo, ' gives saltillo only, so we can teach different solutions
c v46 Compensate for Word etc autocurling the apostrophe into U+2018 or U+2019 by having a starting rota for those that ends in Saltillo
c v47 ctrl-alt ] or hyphen to produce [ and = in case one set of keys stops working (obscure keyboard problems!)
c v48 vertical line and overdot added to diacritics. Alternatives to underline, overline, underdot and overdot combining chars added, and capital Q popup on touch keyboard.
c v49 Remove deprecated functions. Re-order and index code sections for clarity.
c Current issues - doesn't work when Windows typing suggestions is on.
c v50 Added IPA-stye LATIN ** TURNED V (028C, 0245) small and capital letters to touch and as variants of v for Dadiya and some other languages.
c v51 Touch: Added ⱱ (small and capital) with hook, used in Tugbiri and a few other languages for labio-dental flap. Starting to experiment with Keyman 16's other gestures.
c v52-56 Added o with stroke (Cicipu) to the desktop keybaord. Bumped version number to match Android version.

store(&VERSION) '10.0'
store(&NAME) 'Naija Type'
c store(&ETHNOLOGUECODE) 'eng hau ibo yor ahs png fuv ldb yes bqv uss uth cdr dri nat acp cen dud ann gby gbr iri bcy bom mda grh knc igl'
c store(&WINDOWSLANGUAGES) 'x0468 x0470 x046A x0809 x0409'
c store(&LANGUAGE) 'x0809'
store(&LAYOUTFILE) 'naijatype.keyman-touch-layout'
store(&COPYRIGHT) '© 2024 David Rowbory'
store(&BITMAP) 'icons_pictures\naijatype.ico'
store(&KMW_HELPFILE) 'naijatype-help.htm'
store(&MESSAGE) 'Distribute under MIT Licence'
store(&KMW_HELPTEXT) 'Type common Nigerian language letters and the ₦ sign'
store(&KMW_EMBEDCSS) 'naijatype.css'
c [line] sctn#: purpose
c [110] 0: Setup
c [150] 1: Boilerplate Keyman Autocap
c [212] 2: Main Group starts
c [220] 3: Curly Quotes
c [228] 4: Changeshape reset state on backspace
c [234] 5: Smallcaps
c [250] 6: Tone rota
c [256] 7: Nasal Toggle
c [262] 8: Double tap saltillo options
c [271] 9: Literal escapes - direct keying for backtick and tilde
c [281] 10: Letter modifications
c [293] 11: Broken keyboard alternatives
c [309] 12: Diacritic direct keying
c [317] 13: Special letter direct keying
c [339] 14: Touch key definitions
c [402] 15: End of Sentence punctuation and capitalisation

c Rota system originally designed by Andy Kellogg and reimplemented by David Rowbory
c   Concept:
c       Start with the normal letters, then a trigger key is pressed:
c       Lookup char in LtrsSET1. Position p.
c       Swap for the letter at position p in LtrsSET2.
c           If LtrsSET2(p)=LtrsSET1(p+1) then we have a back-forth rota.
c       But we can manage a longer rota by arranging a chain where the first letter of
c       the sequence is bumped to the end of the second.
c           LtrsSET1: abcde
c           LtrsSET2: bcdea
c We use a LibreOffice sheet to calculate this and show the rotations.
c
c All this is very well but the lookup and switch only works
c if we are replacing SINGLE unicode characters, not the double
c (combining) underline and underdot.
c For those we need to do something different.
c If we wanted underline and underdot to be the first change then we could
c just do them first, but we want to do the other shape changes first, and only
c move onto underlines when we have exhausted the other shape changes.
c
c So we first check for an underline and change it to a dot.
c If dot then we remove dot.
c If neither underline or underdot are found then we need to change shape
c working through a rota.
c When we get to the last shape in the rota, then we change to an underline of the base letter.

c SIL Best practice when using non-alphabetic characters in orthographies	https://www.sil.org/sites/default/files/best_practice_for_non-alphabetic_characters_v2_0.pdf
c For testing word breaking	https://util.unicode.org/UnicodeJsps/breaks.jsp
c Character properties	https://util.unicode.org/UnicodeJsps/character.jsp?a=1E68&B1=Show
c Finding similar looking letters	https://util.unicode.org/UnicodeJsps/confusables.jsp?a=g&r=None

c 0: SETUP = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = = =
c Action keys
store(LtrsKey)        ";"         c if changed, you have to manually change method for typing this control key
store(ToneKey)        "`"         c if changed, you have to manually change method for typing this control key
store(NasalKey)       "~"   c U+00AC c if changed, you have to manually change method for typing this control key
store(smallCapsOn)

c REPLACE UNDER HERE _________________________________________________
c These stores generated by the naijatype_key_generator.ods file v52
store(LtrsSET1)	"aəeɛiɨɪoɔøuʊʉbɓcçdɗgɣhɦkƙnŋɲsʃvⱱʌyƴzʒ$₦£€₵qm!¡'ꞌꞋ?¿ˈʔ‘ꞌ’ꞌ“Ꞌ”ꞋAƏEƐIƗꞮOƆØUƱɄBƁCÇDƊGƔHꞪKƘNŊƝSƩVƲɅYƳZƷ$₦£€₵QM!¡'ꞋꞋ?¿ˈʔ‘Ꞌ’Ꞌ“Ꞌ”Ꞌ"
store(LtrsSET2)	"əaɛeɨɪiɔøoʊʉuɓbçcɗdɣgɦhƙkŋɲnʃsⱱʌvƴyʒz₦£€₵$qm¡!ꞌꞋ'¿ˈʔ?ꞌ‘ꞌ’Ꞌ“Ꞌ”ƏAƐEƗꞮIƆØOƱɄUƁBÇCƊDƔGꞪHƘKŊƝNƩSƲɅVƳYƷZ₦£€₵$QM¡!ꞋꞋ'¿ˈʔ?Ꞌ‘Ꞌ’Ꞌ“Ꞌ”"
store(LtrsUnderlinable)	"aeiouhnszAEIOUHNSZ"
store(LtrsUnderlineAfter)	"əɛɪøʉɦɲʃʒƏƐꞮØɄꞪƝƩƷ"

store(SmallCapsRef)	"abcdefghijklmnopqrstuvwyz"
store(SmallCaps)	U+1D00 U+0299 U+1D04 U+1D05 U+1D07 U+A730 U+0262 U+029C U+026A U+1D0A U+1D0B U+029F U+1D0D U+0274 U+1D0F U+1D18 U+A7AF U+0280 U+A731 U+1D1B U+1D1C U+1D20 U+1D21 U+028F U+1D22

store(Nasal)	U+0303								c Nasal tilde
store(Underline)	U+0331								c underline
store(Underdot)	U+0323								c underdot
store(LtrsWithTone)	"aəeɛiɨɪoɔøuʊʉnŋɲvⱱʌqmAƏEƐIƗꞮOƆØUƱɄNŊƝVƲɅQM"							outs(Underline) outs(Underdot)
store(LtrsWithNasal)	"aəeɛiɨɪoɔøuʊʉnŋɲvⱱʌqmAƏEƐIƗꞮOƆØUƱɄNŊƝVƲɅQM"							outs(Underline) outs(Underdot)
store(Tone1st)	U+0301								c high
store(ToneLast)	U+0307								c overdot
store(ToneCore)  	U+0300 U+0302 U+030C U+0304 U+030D								c low, rise, fall, mid, vertical
store(ToneRota1)	outs(Tone1st) outs(ToneCore)								c All but the last tone diacritic
store(ToneRota2)	outs(ToneCore) outs(ToneLast)								c The next tone diacritic to change to
store(ToneSubset)	outs(ToneRota1) outs(ToneLast)    								c All the tones
c REPLACE UP TO HERE ----------------------------------------------------------------------------------

store(TonesAll)                outs(ToneSubset) U+030B U+030F U+1DC4 U+1DC5 U+1DC6 U+1DC7
store(WhiteSpace) [K_ENTER] " " [K_TAB]
store(CurlyQuoteOpenBefore) "QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopsdfghjklzxcvbnm"
store(CurlyQuoteCloseAfter) ".,!?"
store(&KEYBOARDVERSION) '56'
c store(&mnemoniclayout) '1' c Experimental - will it keep working on UK keyboards?
c To be mnemonic we need to remove all K_ key codes and replace with the output letter,
c eg instead of K_A we would use 'a'.
c https://blog.keyman.com/2011/08/developing-mnemonic-layouts-for-keyman-desktop/

c 1: BOILERPLATE KEYMAN AUTOCAP = = = = = = = = = = = = = = = = = = = = = =

c BEGIN CODE FROM https://help.keyman.com/developer/language/guide/casing-support
c This would appear to make my auto cap after sentence-ending punctuation unnecessary, so it can
c be removed in a future version. But for now this keyboard will function with KM 14 and earlier too.
store(&TARGETS) 'any'
begin Unicode > use(main)
begin NewContext > use(NewContext)
begin PostKeystroke > use(PostKeystroke)

c This tells Keyman which keys should have casing behavior applied
store(&CasedKeys) [K_A] .. [K_Z]

c We'll define some useful stores here
store(key) [K_A] .. [K_Z] [SHIFT K_A] .. [SHIFT K_Z]
store(out) 'a' .. 'z'     'A' .. 'Z'

store(caps) 'A'..'Z'
store(digit) '0'..'9'

group(NewContext) readonly
    c Any time we get a new context, by mouse click, tap,
    c cursor movement, new document, etc, we'll try and
    c determine the best layer to use
    nomatch > use(detectStartOfSentence)

group(PostKeystroke) readonly
    c We get here after every keystroke and model action is processed

    c Okay, let's stay on the numeric layer if we are there already
    if(&newLayer = "") if(&layer = 'numeric') any(digit) > context

    c Don't swap off the caps lock layer automatically
    if(&layer = 'caps') > context

    c no other changes, so detect sentence or layer change, as long
    c as the user hasn't attempted to change layer themselves.
    if(&newLayer = "") > use(detectStartOfSentence)

group(detectStartOfSentence) readonly
    c We have a shared group for the start of sentence detection now
    c which will set the current layer according to the current context.

    c Some common end-of-sentence punctuation
    store(sentencePunctuation) '.?!'

    c If we are at the start of a text field, we're at the 'start of a
    c sentence', so we'll move to the Shift layer
    nul > layer('shift')

    c Otherwise, we'll move to the Shift layer only if we see end of a
    c sentence followed by one or two spaces.
    any(sentencePunctuation) ' ' > layer('shift')
    any(sentencePunctuation) '  ' > layer('shift')

    c And because we haven't see any of these situations above, we'll
    c move to the default layer. Note that this effectively drops us
    c back to the default layer after every keystroke that isn't blocked
    c by the `PostKeystroke` or early `detectStartOfSentence` rules.
    nomatch > layer('default')
c END CODE FROM KEYMAN WEBSITE for casing support

c 2: Main Group: setup and help
group(main) using keys
store(changeshape) '1' c ie default to changing shape
store(canunderline) '0' c ie can't underline
"kb" +"v" > "Keyboard version " outs(&KEYBOARDVERSION)
"version" + ";" > "Keyboard version " outs(&KEYBOARDVERSION)
"vv" + "v" > "Keyboard version " outs(&KEYBOARDVERSION)

c 3: Curlify quotes
U+0022 + U+0020 > U+201D " " c Close double after space
any(CurlyQuoteCloseAfter) + U+0022 > context U+201D
U+0022 + any(CurlyQuoteOpenBefore) > U+201C index(CurlyQuoteOpenBefore,2)
U+0027 + U+0020 > U+2019 " " c Close single after space
any(CurlyQuoteCloseAfter) + U+0027 > context U+2019 c Close after other things
U+0027 + any(CurlyQuoteOpenBefore) > U+2018 index(CurlyQuoteOpenBefore,2) c Open single before

c 4: Reset changeshape state when backspacing
c Bugfix July 2021 otherwise wrong changes are made
outs(Underline) + [K_BKSP] > nul set(changeshape='1')
outs(Underdot) + [K_BKSP] > nul set(changeshape='1')
any(LtrsSET1) + [K_BKSP] > nul set(changeshape='1')

c 5: Produce small caps if the mode is turned on (see below)
c if(smallCapsOn='1') '^' + any(SmallCapsRef) > index(SmallCaps,3) '^'
if(smallCapsOn='1') + any(SmallCapsRef) > index(SmallCaps,2)
c Turn off small caps mode on double = or after a space or hyphen
c Test whether this is more useful or not. Probably not.
c if(smallCapsOn='1') '^' + '-' > '-' set(smallCapsOn='0')
c if(smallCapsOn='1') '^' + ' ' > ' ' set(smallCapsOn='0')
c if(smallCapsOn='1') '^=' + '=' > nul set(smallCapsOn='0')
c if(smallCapsOn='1') + '-' > '-' set(smallCapsOn='0')
c if(smallCapsOn='1') + ' ' > ' ' set(smallCapsOn='0')
if(smallCapsOn='1') '=' + '=' > nul set(smallCapsOn='0')
c Turn on small caps mode (not working on Windows Keyman 15.0.268, fixed on 0.269+)
if(smallCapsOn!='1') '=' + '=' > nul set(smallCapsOn='1')
c Use alt+semicolon to get a real semicolon
+ [ALT K_COLON] > ';'

c 6: Tone Rota
any(LtrsWithTone) + any(ToneKey) > context U+0301   c Start tone
any(ToneRota1) + any(ToneKey) > index(ToneRota2,1)  c Move to next tone letter
outs(ToneLast) + any(ToneKey) > nul     c Remove tone after we use the last tone letter
outs(Nasal) + any(ToneKey) > context outs(Tone1st)    c it is assumed that if a letter has nasal it can have tone

c 7: Nasal Toggle
any(LtrsWithNasal) + any(NasalKey) > context U+0303
outs(Nasal) + any(NasalKey) > nul
outs(Nasal) any(ToneSubset) + any(NasalKey) > index(ToneSubset, 2)
any(LtrsWithNasal) any(ToneSubset) + any(NasalKey) > index(LtrsWithNasal, 1) outs(Nasal) index(ToneSubset,2)

c 8: Double tap apostrophe to get Saltillo - even with Word autocurling.
"'" + "'" > "ꞌ"    c Small saltillo a78c
U+2018 + "'" > "ꞌ"    c Small saltillo a78c ‘
U+2019 + "'" > "ꞌ"    c Small saltillo a78c ’
'"' + '"' > 'Ꞌ'    c Capital a78b
'”' + '"' > 'Ꞌ'    c Capital a78b - curled close
'“' + '"' > 'Ꞌ'    c Capital a78b - curled open
'@' + '@' > 'Ꞌ'    c Capital a78b  -- to cope with UK/British keyboards common in Nigeria

c 9: Literal escapes -- ie type the actual keys that do the magic.
c IMPORTANT: This has only been tested on US Keyboards
+ [ALT K_BKQUOTE]       > "`"
+ [ALT SHIFT K_BKQUOTE] > "~"

c Make Control Keys Do Nothing Unless with Special Context
+ any(LtrsKey)  > ';'       c was null, but changed to output the normal character - 2021
+ any(ToneKey)  > '`'
+ any(NasalKey) > '~'

c 10: Letter Modifications
c
c if we have an underline then change to a dot and update what rules we will follow
outs(Underline) + any(LtrsKey) > outs(Underdot)
c if we have an underdot then remove it and get ready to change shape
outs(Underdot) + any(LtrsKey) > nul  c underdot to change shape once and next shape change will switch to underline

c we used to have some complicated rules here, but we don't need them
any(LtrsUnderlineAfter) + any(LtrsKey) > index(LtrsUnderlinable, 1) outs(Underline)  c change shape next
any(LtrsSET1) + any(LtrsKey) > index(LtrsSET2, 1)


c 11: Obscure workarounds for broken keyboards
+ [CTRL ALT K_LBRKT] > ']'
+ [CTRL ALT K_RBRKT] > '['
+ [CTRL ALT SHIFT K_LBRKT] > '}'
+ [CTRL ALT SHIFT K_RBRKT] > '{'
+ [CTRL ALT K_HYPHEN] > '='
+ [CTRL ALT SHIFT K_HYPHEN] > '+'
']' + outs(LtrsKey) > '['
'[' + outs(LtrsKey) > ']'
'}' + outs(LtrsKey) > '{'
'{' + outs(LtrsKey) > '}'
'_' + outs(LtrsKey) > '+'
'-' + outs(LtrsKey) > '='
'<' + outs(LtrsKey) > 'M'
',' + outs(LtrsKey) > 'm'

c 12: Alternative direct diacritic adds
+ [ALT K_PERIOD] > U+0323       c underdot  .
+ [SHIFT ALT K_PERIOD] > U+0307 c overdot
+ [SHIFT ALT K_HYPHEN] > U+0304 c underline _
+ [ALT K_HYPHEN] > U+0331   c overline
+ [ALT K_BKSLASH] > U+030D   c vert line
+ [SHIFT ALT K_BKSLASH] > U+030D   c vert line

c 13: Special Ways to Type Select Special Letters Directly (Mac users appreciate this)
+ [CTRL ALT K_Y] > 'ƴ'
+ [CTRL ALT K_K] > 'ƙ'
+ [CTRL ALT K_B] > 'ɓ'
+ [CTRL ALT K_D] > 'ɗ'
+ [CTRL ALT K_N] > 'ŋ'
+ [CTRL ALT K_O] > 'ɔ'
+ [CTRL ALT K_I] > 'ɨ'
+ [CTRL ALT K_U] > 'ʊ'
+ [CTRL ALT K_E] > 'ɛ'
+ [CTRL ALT K_A] > 'ə'
+ [CTRL ALT SHIFT K_Y] > 'Ƴ'
+ [CTRL ALT SHIFT K_K] > 'Ƙ'
+ [CTRL ALT SHIFT K_B] > 'Ɓ'
+ [CTRL ALT SHIFT K_D] > 'Ɗ'
+ [CTRL ALT SHIFT K_N] > 'Ŋ'
+ [CTRL ALT SHIFT K_O] > 'Ɔ'
+ [CTRL ALT SHIFT K_I] > 'Ɨ'
+ [CTRL ALT SHIFT K_U] > 'Ʊ'
+ [CTRL ALT SHIFT K_E] > 'Ɛ'
+ [CTRL ALT SHIFT K_A] > 'Ə'

c 14: These named letters and combinations are used by the touch keyboard
+ [T_a_underline] > 'a̱'
+ [T_e_underline] > 'e̱'
+ [T_i_underline] > 'i̱'
+ [T_o_underline] > 'o̱'
+ [T_u_underline] > 'u̱'
+ [T_n_underline] > 'n' U+0331
+ [T_a_underdot] > 'ạ'
+ [T_e_underdot] > 'ẹ'
+ [T_i_underdot] > 'ị'
+ [T_o_underdot] >  'ọ'
+ [T_u_underdot] > 'ụ'
+ [T_n_underdot] > 'ṇ'
+ [T_s_underdot] > 's' U+0323
+ [T_h_underdot] > 'ḥ'
+ [T_ucA_underline] > 'A̱'
+ [T_ucE_underline] > 'E̱'
+ [T_ucI_underline] > 'I̱'
+ [T_ucO_underline] > 'O̱'
+ [T_ucU_underline] > 'U̱'
+ [T_ucN_underline] > 'N' U+0331
+ [T_ucA_underdot] > 'Ạ'
+ [T_ucE_underdot] > 'Ẹ'
+ [T_ucI_underdot] > 'Ị'
+ [T_ucO_underdot] > 'Ọ'
+ [T_ucU_underdot] > 'Ụ'
+ [T_ucN_underdot] > 'Ṇ'
+ [T_ucS_underdot] > 'S' U+0323
+ [T_ucH_underdot] > 'Ḥ'
+ [T_n_bar] > 'n' U+0304
+ [T_ucN_bar] > 'N' U+0304
+ [T_q_acute] > 'q' U+0301
+ [T_q_grave] > 'q' U+0300
+ [T_q_nasal] > 'q' U+0303
+ [T_ucQ_acute] > 'Q' U+0301
+ [T_ucQ_grave] > 'Q' U+0300
+ [T_ucQ_nasal] > 'Q' U+0303
+ [T_end_sentence] > '. '

c nasals from touch layout
+ [T_a_nasal] > 'a' U+0303
+ [T_ucA_nasal] > 'A' U+0303
+ [T_a2_nasal] > 'ə' U+0303
+ [T_ucA2_nasal] > 'Ə' U+0303
+ [T_e_nasal] > 'e' U+0303
+ [T_ucE_nasal] > 'E' U+0303
+ [T_e2_nasal] > 'ɛ' U+0303
+ [T_ucE2_nasal] > 'Ɛ' U+0303
+ [T_i_nasal] > 'i' U+0303
+ [T_ucI_nasal] > 'I' U+0303
+ [T_i2_nasal] > 'ɨ' U+0303
+ [T_ucI2_nasal] > 'Ɨ' U+0303
+ [T_u_nasal] > 'u' U+0303
+ [T_ucU_nasal] > 'U' U+0303
+ [T_o_nasal] > 'o' U+0303
+ [T_ucO_nasal] > 'O' U+0303
+ [T_o2_nasal] > 'ɔ' U+0303
+ [T_ucO2_nasal] > 'Ɔ' U+0303

c Emojis
+ [T_thumbs_up] > U+1F44D U+1F3FE
+ [T_hands_together] > U+1F64F U+1F3FE

c 15: End of Sentence punctuation and capitalisation
c Added double space for end of sentence and remove spaces (U+0020) before , . ? !
c Because auto suggestions will end with a space and we want punctuation to work.
U+0020 + ',' > ', '
c Also auto-shift layer when we type an end of sentence
'. ' + U+0020 > '   ' c Turn 3 or more spaces into 3 spaces because we clearly really want that.
U+0020 + U+0020 > '. ' layer("shift")
U+0020 + '.' > '. ' layer("shift")
c U+0020 + U+003f > '? ' layer("shift")     c Probably can delete these two as they duplicate the below lines
c U+0020 + U+0021 > '! ' layer("shift")
U+0020 + '?' > '? ' layer("shift")
U+0020 + '!' > '! ' layer("shift")
'.' + U+0020 > '. ' layer("shift") c For touch, so we can avoid switching to shift during URLs
c Why did we ever use the below line?
c It stops newline/enter working at the end of a line with a full stop.
c '.' + any(WhiteSpace) > context index(WhiteSpace,2) layer("shift") c v30 bug fix

c Change shift layer when we backspace, eg space-space then backspace backspace.
c Remove shift layer when we delete something that may have caused it to be turned on.
c This may be unhelpful if we had shift or caps on before, but that seems unlikely.
'.'+ [K_BKSP] > nul layer("default")
'!'+ [K_BKSP] > nul layer("default")
'?'+ [K_BKSP] > nul layer("default")
' '+ [K_BKSP] > nul layer("default")

c Shift when we backspace to end of sentence.
'. '+ [K_BKSP] > '.' layer("shift")
'! '+ [K_BKSP] > '!' layer("shift")
'? '+ [K_BKSP] > '?' layer("shift")

+ [T_new_325] > 'down'
+ [T_new_326] > 'up'
+ [T_new_327] > 'right'
+ [T_new_328] > 'left'

