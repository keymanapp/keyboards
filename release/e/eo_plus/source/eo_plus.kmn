c Extended Esperanto Keyboard
c 
c This keyboard is designed to simplify the input of the Esperanto special characters, add the main suffixes and facilitate the writing of the most common words and phrases.
c 
c @author: Andrea Vaccari

store(&VERSION) '15.0'
store(&NAME) 'Esperanto Plus'
store(&COPYRIGHT) '© Andrea Vaccari'
store(&KEYBOARDVERSION) '3.0.1'
store(&BITMAP) 'eo_plus.ico'
store(&LAYOUTFILE) 'eo_plus.keyman-touch-layout'
store(&TARGETS) 'any'
store(&VISUALKEYBOARD) 'eo_plus.kvks'
$keymanonly: store(&MNEMONICLAYOUT) "1"

c -----------------------------------------------------------------------------------------
c General variables
c -----------------------------------------------------------------------------------------
store(letters_lower) 'abcĉdefgĝhĥijĵklmnopqrsŝtuŭvwxyz'
store(letters_upper) 'ABCĈDEFGĜHĤIJĴKLMNOPQRSŜTUŬVWXYZ'
store(letters) outs(letters_lower) outs(letters_upper)
store(stofsen) '.!?' c Start of sentence

c =========================================================================================
c Begin
c =========================================================================================
begin Unicode > use(main)

c =========================================================================================
c Main
c =========================================================================================
group(main) using keys

c -----------------------------------------------------------------------------------------
c Punctuation
c -----------------------------------------------------------------------------------------
$keymanweb: store(punctua) '.,;:!?'
$keymanweb: ' ' + any(punctua) > index(punctua, 2) ' '

c -----------------------------------------------------------------------------------------
c Special Characters
c -----------------------------------------------------------------------------------------
$keymanonly: store(x_chars) 'xX'
$keymanonly: store(i_chars) 'cghjsuCGHJSU'
$keymanonly: store(o_chars) 'ĉĝĥĵŝŭĈĜĤĴŜŬ'

$keymanonly: any(i_chars) + any(x_chars) > index(o_chars, 1)
$keymanonly: any(o_chars) + any(x_chars) > index(i_chars, 1) index(x_chars, 2)

c -----------------------------------------------------------------------------------------
c Suffixes
c -----------------------------------------------------------------------------------------
store(key) ''
store(root) '0'

$keymanweb: + [T_ROOT_ON]  > set(root = '1')
$keymanweb: + [T_ROOT_OFF] > set(root = '0')

$keymanweb: + [T_N]  > set(key = 'n')   use(Suffix_Prepare)
$keymanweb: + [T_O]  > set(key = 'o')   use(Suffix_Prepare)
$keymanweb: + [T_I]  > set(key = 'i')   use(Suffix_Prepare)
$keymanweb: + [T_NT] > set(key = 'nt')  use(Suffix_Prepare)
$keymanweb: + [T_T]  > set(key = 't')   use(Suffix_Prepare)
$keymanweb: + [T_IG] > set(key = 'ig')  use(Suffix_Prepare)

c -----------------------------------------------------------------------------------------
c The '<', '>' chars
c -----------------------------------------------------------------------------------------
$keymanonly: + ['<'] > '<'
$keymanonly: + [SHIFT '<'] > '>'

c -----------------------------------------------------------------------------------------
c Extensions
c -----------------------------------------------------------------------------------------
any(letters) 'ee' + 'a' > context
'ee' + 'a' > 'Esperanta'

any(letters) 'mf' + 'b' > context
any(stofsen) ' mf' + 'b' > index(stofsen, 1) ' Mi fartas bone'
' mf' + 'b' > ' mi fartas bone'
'mf' + 'b' > 'Mi fartas bone'

any(letters) 'sl' + 'c' > context
any(stofsen) ' sl' + 'c' > index(stofsen, 1) ' Saluton al ĉiuj'
' sl' + 'c' > ' saluton al ĉiuj'
'sl' + 'c' > 'Saluton al ĉiuj'

any(letters) 'h' + 'd' > context
any(stofsen) ' h' + 'd' > index(stofsen, 1) ' Hodiaŭ'
' h' + 'd' > ' hodiaŭ'
'h' + 'd' > 'Hodiaŭ'

any(letters) 'mf' + 'd' > context
any(stofsen) ' mf' + 'd' > index(stofsen, 1) ' Mi fartas bone, dankon'
' mf' + 'd' > ' mi fartas bone, dankon'
'mf' + 'd' > 'Mi fartas bone, dankon'

any(letters) 'zm' + 'f' > context
'zm' + 'f' > 'Zamenhof'

any(letters) 'kv' + 'f' > context
any(stofsen) ' kv' + 'f' > index(stofsen, 1) ' Kiel vi fartas?'
' kv' + 'f' > ' kiel vi fartas?'
'kv' + 'f' > 'Kiel vi fartas?'

any(letters) 'm' + 'g' > context
any(stofsen) ' m' + 'g' > index(stofsen, 1) ' Morgaŭ'
' m' + 'g' > ' morgaŭ'
'm' + 'g' > 'Morgaŭ'

any(letters) 'bt' + 'g' > context
any(stofsen) ' bt' + 'g' > index(stofsen, 1) ' Bonan tagon'
' bt' + 'g' > ' bonan tagon'
'bt' + 'g' > 'Bonan tagon'

any(letters) 'd' + 'k' > context
any(stofsen) ' d' + 'k' > index(stofsen, 1) ' Dankon'
' d' + 'k' > ' dankon'
'd' + 'k' > 'Dankon'

any(letters) 'nd' + 'k' > context
any(stofsen) ' nd' + 'k' > index(stofsen, 1) ' Ne dankinde'
' nd' + 'k' > ' ne dankinde'
'nd' + 'k' > 'Ne dankinde'

any(letters) 'bd' + 'k' > context
any(stofsen) ' bd' + 'k' > index(stofsen, 1) ' Bone, dankon'
' bd' + 'k' > ' bone, dankon'
'bd' + 'k' > 'Bone, dankon'

any(letters) 'bv' + 'l' > context
any(stofsen) ' bv' + 'l' > index(stofsen, 1) ' Bonvolu'
' bv' + 'l' > ' bonvolu'
'bv' + 'l' > 'Bonvolu'

any(letters) 'ks' + 'l' > context
any(stofsen) ' ks' + 'l' > index(stofsen, 1) ' Korajn salutojn'
' ks' + 'l' > ' korajn salutojn'
'ks' + 'l' > 'Korajn salutojn'
 
any(letters) 'kd' + 'n' > context
any(stofsen) ' kd' + 'n' > index(stofsen, 1) ' Koran dankon'
' kd' + 'n' > ' koran dankon'
'kd' + 'n' > 'Koran dankon'

any(letters) 'bk' + 'n' > context
any(stofsen) ' bk' + 'n' > index(stofsen, 1) ' Bonan Kristnaskon'
' bk' + 'n' > ' bonan Kristnaskon'
'bk' + 'n' > 'Bonan Kristnaskon'

any(letters) 'fk' + 'n' > context
any(stofsen) ' fk' + 'n' > index(stofsen, 1) ' Feliĉan Kristnaskon'
' fk' + 'n' > ' feliĉan Kristnaskon'
'fk' + 'n' > 'Feliĉan Kristnaskon'

any(letters) 'ee' + 'o' > context
'ee' + 'o' > 'Esperanto'

any(letters) 'km' + 'p' > context
any(stofsen) ' km' + 'p' > index(stofsen, 1) ' Kompreni'
' km' + 'p' > ' kompreni'
'km' + 'p' > 'Kompreni'

any(letters) 'mk' + 'p' > context
any(stofsen) ' mk' + 'p' > index(stofsen, 1) ' Mi komprenas'
' mk' + 'p' > ' mi komprenas'
'mk' + 'p' > 'Mi komprenas'

any(letters) 'h' + 'r' > context
any(stofsen) ' h' + 'r' > index(stofsen, 1) ' Hieraŭ'
' h' + 'r' > ' hieraŭ'
'h' + 'r' > 'Hieraŭ'

any(letters) 'vp' + 'r' > context
any(stofsen) ' vp' + 'r' > index(stofsen, 1) ' Vi pravas'
' vp' + 'r' > ' vi pravas'
'vp' + 'r' > 'Vi pravas'

any(letters) 'bv' + 's' > context
any(stofsen) ' bv' + 's' > index(stofsen, 1) ' Bonan vesperon'
' bv' + 's' > ' bonan vesperon'
'bv' + 's' > 'Bonan vesperon'

any(letters) 'bp' + 's' > context
any(stofsen) ' bp' + 's' > index(stofsen, 1) ' Bonan Paskon'
' bp' + 's' > ' bonan Paskon'
'bp' + 's' > 'Bonan Paskon'

any(letters) 'kn' + 's' > context
any(stofsen) ' kn' + 's' > index(stofsen, 1) ' Konsenti'
' kn' + 's' > ' konsenti'
'kn' + 's' > 'Konsenti'

any(letters) 'mk' + 's' > context
any(stofsen) ' mk' + 's' > index(stofsen, 1) ' Mi konsentas'
' mk' + 's' > ' mi konsentas'
'mk' + 's' > 'Mi konsentas'

any(letters) 'mn' + 's' > context
any(stofsen) ' mn' + 's' > index(stofsen, 1) ' Mi ne scias'
' mn' + 's' > ' mi ne scias'
'mn' + 's' > 'Mi ne scias'

any(letters) 'bm' + 't' > context
any(stofsen) ' bm' + 't' > index(stofsen, 1) ' Bonan matenon'
' bm' + 't' > ' bonan matenon'
'bm' + 't' > 'Bonan matenon'

any(letters) 'sl' + 't' > context
any(stofsen) ' sl' + 't' > index(stofsen, 1) ' Saluton'
' sl' + 't' > ' saluton'
'sl' + 't' > 'Saluton'

c =========================================================================================
c Suffix_Prepare
c =========================================================================================
group(Suffix_Prepare)

c -----------------------------------------------------------------------------------------
c Remove spaces after the previous word, execute Suffix_Execute and add a space.
c -----------------------------------------------------------------------------------------
' ' > nul use(Suffix_Prepare)
nomatch > use(Suffix_Execute) ' '

c =========================================================================================
c Suffix_Execute
c =========================================================================================
group(Suffix_Execute)
        
if(key = 'n')   >                                        use(N_Exec)
if(key = 'o')   > use(S1_Prep)                           use(O_Exec)                            use(S1_Exec)
if(key = 'i')   > use(S1_Prep)                           use(I_Exec)                            use(S1_Exec)
if(key = 'nt')  > use(S1_Prep) use(S2_Prep)              use(NT_Exec)              use(S2_Exec) use(S1_Exec)
if(key = 't')   > use(S1_Prep) use(S2_Prep)              use(T_Exec)               use(S2_Exec) use(S1_Exec)
if(key = 'ig')  > use(S1_Prep) use(S2_Prep) use(S3_Prep) use(IG_Exec) use(S3_Exec) use(S2_Exec) use(S1_Exec)

c -----------------------------------------------------------------------------------------
c The suffixes (position from end)
c -----------------------------------------------------------------------------------------
store(S1) '' c 1 
store(S2) '' c 2 
store(S3) '' c 3 
store(S4) '' c 4 

c =========================================================================================
c *** KEY EXECUTE ***
c =========================================================================================

c =========================================================================================
c N_Exec (Level 1)
c =========================================================================================
group(N_Exec) 

'o'   > 'on'
'on'  > 'oj'
'oj'  > 'ojn'
'ojn' > 'o'

'a'   > 'an'
'an'  > 'aj'
'aj'  > 'ajn'
'ajn' > 'a'

'e'   > 'en'
'en'  > 'e'

c -----------------------------------------------------------------------------------------
c Turn 2nd level i-suffixes to 'on'
c -----------------------------------------------------------------------------------------

'i'   > 'on'
'as'  > 'on'
'is'  > 'on'
'os'  > 'on'
'us'  > 'on'
'u'   > 'on'

nomatch > 'on'

c =========================================================================================
c O_Exec (Level 2)
c =========================================================================================
group(O_Exec) 

'o'  > 'a'
'a'  > 'e'
'e'  > 'o'

c -----------------------------------------------------------------------------------------
c Turn same level suffixes to 'o'
c -----------------------------------------------------------------------------------------

'i'  > 'o'
'as' > 'o'
'is' > 'o'
'os' > 'o'
'us' > 'o'
'u'  > 'o'

nomatch > 'o'

c =========================================================================================
c I_Exec (Level 2)
c =========================================================================================
group(I_Exec) 

 if(root = '0') 'antus' > 'antas' c 'anti' not common
 if(root = '0') 'intus' > 'intas' c 'inti' not common
 if(root = '0') 'ontus' > 'ontas' c 'onti' not common

 if(root = '0') 'atus'  > 'atas'  c 'ati' not common
 if(root = '0') 'itus'  > 'itas'  c 'iti' not common
 if(root = '0') 'otus'  > 'otas'  c 'oti' not common

 if(root = '0') 'anta'  > 'antas' c 'anti' not common
 if(root = '0') 'inta'  > 'intas' c 'inti' not common
 if(root = '0') 'onta'  > 'ontas' c 'onti' not common

 if(root = '0') 'ata'   > 'atas'  c 'ati' not common
 if(root = '0') 'ita'   > 'itas'  c 'iti' not common
 if(root = '0') 'ota'   > 'otas'  c 'oti' not common

'i'  > 'as'
'as' > 'is'
'is' > 'os'
'os' > 'us'
'us' > 'u'
'u'  > 'i'

c -----------------------------------------------------------------------------------------
c Turn same level suffixes to 'i'
c -----------------------------------------------------------------------------------------
'o' > 'i'
'a' > 'i'
'e' > 'i'

nomatch > 'i'

c =========================================================================================
c NT_Exec (Level 3)
c =========================================================================================
group(NT_Exec) 

if(root = '0') 'ant' > 'int'
if(root = '0') 'int' > 'ont'
if(root = '0') 'ont' > nul  

c -----------------------------------------------------------------------------------------
c Turn same level suffixes to 'ant'
c -----------------------------------------------------------------------------------------
if(root = '0') 'at' > 'ant'
if(root = '0') 'it' > 'ant'
if(root = '0') 'ot' > 'ant'

nomatch > 'ant' set(root = '0') set(&layer = 'default')

c =========================================================================================
c T_Exec (Level 3)
c =========================================================================================
group(T_Exec) 

if(root = '0') 'at' > 'it'
if(root = '0') 'it' > 'ot'
if(root = '0') 'ot' > nul

c -----------------------------------------------------------------------------------------
c Turn same level suffixes to 'at'
c -----------------------------------------------------------------------------------------
if(root = '0') 'ant' > 'at'
if(root = '0') 'int' > 'at'
if(root = '0') 'ont' > 'at'

nomatch > 'at' set(root = '0') set(&layer = 'default')

c =========================================================================================
c IG_Exec (Level 4)
c =========================================================================================
group(IG_Exec) 

if(root = '0') 'ig' > 'iĝ'
if(root = '0') 'iĝ' > nul

nomatch > 'ig' set(root = '0') set(&layer = 'default')

c =========================================================================================
c *** SUFFIX PREPARE ***
c =========================================================================================

c =========================================================================================
c S1_Prep
c =========================================================================================
group(S1_Prep) 

if(key = 'o') 'ajn' > 'a' set(S1 = 'n') c 'ejn' not possible
if(key = 'o') 'aj'  > 'a' set(S1 = '')  c 'ej' not possible
if(key = 'i') 'jn'  >     set(S1 = '')  c 'asjn', 'isjn',... not possible
if(key = 'i') 'j'   >     set(S1 = '')  c 'asj', 'isj',... not possible
if(key = 'i') 'n'   >     set(S1 = '')  c 'asn', 'isn',... not possible

'jn' > set(S1 = 'jn')
'n'  > set(S1 = 'n')
'j'  > set(S1 = 'j')

nomatch > set(S1 = '')

c =========================================================================================
c S2_Prep
c =========================================================================================
group(S2_Prep) 

if(key = 'nt') 'i' > set(S2 = 'a') c 'anti' not usual
if(key = 'nt') 'u' > set(S2 = 'a') c 'antu' not usual
if(key = 't')  'i' > set(S2 = 'a') c 'ati' not usual
if(key = 't')  'u' > set(S2 = 'a') c 'atu' not usual

'o'  > set(S2 = 'o')
'a'  > set(S2 = 'a')
'e'  > set(S2 = 'e')

'i'  > set(S2 = 'i')
'as' > set(S2 = 'as')
'is' > set(S2 = 'is')
'os' > set(S2 = 'os')
'us' > set(S2 = 'us')
'u'  > set(S2 = 'u')

c -----------------------------------------------------------------------------------------
c When pressing for example the 'nt' key after the word 'viv', it'd become 'vivant', if no
c default value for the S2 suffix has been set. So set it to 'a', for outputting 'vivanta'.
c -----------------------------------------------------------------------------------------
nomatch > set(S2 = 'a')

c =========================================================================================
c S3_Prep
c =========================================================================================
group(S3_Prep) 

'ant' > set(S3 = 'ant')
'int' > set(S3 = 'int')
'ont' > set(S3 = 'ont')

'at'  > set(S3 = 'at')
'it'  > set(S3 = 'it')
'ot'  > set(S3 = 'ot')

nomatch > set(S3 = '')

c =========================================================================================
c S4_Prep
c =========================================================================================
group(S4_Prep) 

'ig' > set(S4 = 'ig')
'iĝ' > set(S4 = 'iĝ')

nomatch > set(S4 = '')

c =========================================================================================
c *** SUFFIX EXECUTE ***
c =========================================================================================

c =========================================================================================
c S1_Exec
c =========================================================================================
group(S1_Exec) 

if(S1 = 'n')  > 'n'
if(S1 = 'j')  > 'j'
if(S1 = 'jn') > 'jn'

c =========================================================================================
c S2_Exec
c =========================================================================================
group(S2_Exec) 

if(S2 = 'o')  > 'o'   
if(S2 = 'a')  > 'a'   
if(S2 = 'e')  > 'e'   

if(S2 = 'i')  > 'i'
if(S2 = 'as') > 'as'
if(S2 = 'is') > 'is'
if(S2 = 'os') > 'os'
if(S2 = 'us') > 'us'
if(S2 = 'u')  > 'u'

c =========================================================================================
c S3_Exec
c =========================================================================================
group(S3_Exec) 

if(S3 = 'ant') > 'ant'
if(S3 = 'int') > 'int'
if(S3 = 'ont') > 'ont'

if(S3 = 'at')  > 'at'
if(S3 = 'it')  > 'it'
if(S3 = 'ot')  > 'ot'

c =========================================================================================
c S4_Exec
c =========================================================================================
group(S4_Exec) 

if(S4 = 'ig')  > 'ig'
if(S4 = 'iĝ')  > 'iĝ'
