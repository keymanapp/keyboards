c dega generated from template at 2021-05-11 09:46:54
c with name "Dega"
store(&VERSION) '15.0'
store(&NAME) 'Dega'
store(&COPYRIGHT) '© MSFJ'
store(&TARGETS) 'any'
store(&VISUALKEYBOARD) 'dega.kvks'
store(&LAYOUTFILE) 'dega.keyman-touch-layout'
store(&BITMAP) 'dega.ico'
store(&CasedKeys)   [K_A] .. [K_Z]
store(&MESSAGE) 'Dega Keyboard is created for indigenous people in the Central Highlands of Vietnam, to preserve their writing, this Dega Keyboard can be used by Êđê, Jơrai, Kơ’Ho, Mơnông, Bahnar and many other indigenous ethnic groups.'
store(&KEYBOARDVERSION) '3.1'

begin Unicode > use(main)
begin NewContext > use(NewContext)
begin PostKeystroke > use(PostKeystroke)

store(key) [K_A] .. [K_Z] [SHIFT K_A] .. [SHIFT K_Z]
store(out) 'a' .. 'z'     'A' .. 'Z'

store(caps) 'A'..'Z'
store(digit) '0'..'9'

group(NewContext) readonly
    c Any time we get a new context, by mouse click, tap,
    c cursor movement, new document, etc, we'll try and
    c determine the best layer to use
    nomatch > use(detectStartOfSentence)

group(PostKeystroke) readonly
    c We get here after every keystroke and model action is processed

    c Okay, let's stay on the numeric layer if we are there already
    if(&newLayer = "") if(&layer = 'numeric') any(digit) > context

    c Don't swap off the caps lock layer automatically
    if(&layer = 'caps') > context

    c no other changes, so detect sentence or layer change, as long
    c as the user hasn't attempted to change layer themselves.
    if(&newLayer = "") > use(detectStartOfSentence)

group(detectStartOfSentence) readonly
    c We have a shared group for the start of sentence detection now
    c which will set the current layer according to the current context.

    c Some common end-of-sentence punctuation
    store(sentencePunctuation) '.?!'

    c If we are at the start of a text field, we're at the 'start of a
    c sentence', so we'll move to the Shift layer
    nul > layer('shift')

    c Otherwise, we'll move to the Shift layer only if we see end of a
    c sentence followed by one or two spaces.
    any(sentencePunctuation) ' ' > layer('shift')
    any(sentencePunctuation) '  ' > layer('shift')

    c And because we haven't see any of these situations above, we'll
    c move to the default layer. Note that this effectively drops us
    c back to the default layer after every keystroke that isn't blocked
    c by the `PostKeystroke` or early `detectStartOfSentence` rules.
    nomatch > layer('default')

group(main) using keys
+ any(key)  > index(out, 1)

+ [SHIFT K_RBRKT] > '}'
+ [SHIFT K_LBRKT] > '{'
+ [K_RBRKT] > ']'
+ [K_LBRKT] > '['

+ [SHIFT K_SLASH] > '?'
+ [SHIFT K_PERIOD] > '>'
+ [SHIFT K_COMMA] > '<'
+ [SHIFT K_QUOTE] > '"'
+ [SHIFT K_COLON] > ':'
+ [SHIFT K_BKSLASH] > '|'
+ [SHIFT K_EQUAL] > '+'
+ [SHIFT K_HYPHEN] > '_'
+ [SHIFT K_0] > ')'
+ [SHIFT K_9] > '('
+ [SHIFT K_8] > '*'
+ [SHIFT K_7] > '&'
+ [SHIFT K_6] > '^'
+ [SHIFT K_5] > '%'
+ [SHIFT K_4] > '$'
+ [SHIFT K_3] > '#'
+ [SHIFT K_2] > '@'
+ [SHIFT K_1] > '!'
+ [SHIFT K_BKQUOTE] > '~'
+ [K_SLASH] > '/'
+ [K_PERIOD] > '.'
+ [K_COMMA] > ','
+ [K_QUOTE] > U+0027
+ [K_COLON] > ';'
+ [K_EQUAL] > '='
+ [K_HYPHEN] > '-'
+ [K_0] > '0'
+ [K_9] > '9'
+ [K_8] > '8'
+ [K_7] > '7'
+ [K_6] > '6'
+ [K_5] > '5'
+ [K_4] > '4'
+ [K_3] > '3'
+ [K_2] > '2'
+ [K_1] > '1'
+ [K_BKQUOTE] > '`'
+ [K_BKSLASH] > '\'

c transform
'a' + [K_A]     > 'â'
'b' + [K_B]     > 'ƀ'
'c' + [K_C]     > 'č'
'd' + [K_D]     > 'đ'
'e' + [K_E]     > 'ê'
'n' + [K_N]     > 'ñ'
'o' + [K_O]     > 'ô'
'o' + [K_W]     > 'ơ'
'u' + [K_U]     > 'ư'
'u' + [K_W]     > 'ư'
'z' + [K_Z]     > '̂'
'x' + [K_X]     > '̆'

'A' + [SHIFT K_A]     > 'Â'
'B' + [SHIFT K_B]     > 'Ƀ'
'C' + [SHIFT K_C]     > 'Č'
'D' + [SHIFT K_D]     > 'Đ'
'E' + [SHIFT K_E]     > 'Ê'
'N' + [SHIFT K_N]     > 'Ñ'
'O' + [SHIFT K_O]     > 'Ô'
'O' + [SHIFT K_W]     > 'Ơ'
'U' + [SHIFT K_U]     > 'Ư'
'U' + [SHIFT K_W]     > 'Ư'
'Z' + [SHIFT K_Z]     > '̂'
'X' + [SHIFT K_X]     > '̆'

c Added Apr 23, 2024

store(aeouK) "aeiouyAEIOUY"
store(aeouGrave) "àèìòùỳÀÈÌÒÙỲ"

store(Circ) "âêôÂÊÔ"
store(Grave) "àèòÀÈÒ"
store(CircGrave) "ầềồẦỀỒ"
store(ou_GraveHorn) "ờừỜỪ"
store(ou_Grave) "òùÒÙ"

any(aeouK) + [K_BKQUOTE] > index(aeouGrave,1)
any(Grave) "z" + [K_Z] > index(CircGrave,1)
any(Circ) + [K_BKQUOTE] > index(CircGrave,1)
any(ou_wx) + [K_BKQUOTE] > index(ou_GraveHorn,1)
any(ou_Grave) + [K_W] > index(ou_GraveHorn,1)
any(ou_Grave) + [SHIFT K_W] > index(ou_GraveHorn,1)

c Added per request on Oct 30, 2023
'A' + [K_A]     > 'Â'
'B' + [K_B]     > 'Ƀ'
'C' + [K_C]     > 'Č'
'D' + [K_D]     > 'Đ'
'E' + [K_E]     > 'Ê'
'N' + [K_N]     > 'Ñ'
'O' + [K_O]     > 'Ô'
'O' + [K_W]     > 'Ơ'
'U' + [K_U]     > 'Ư'
'U' + [K_W]     > 'Ư'
'Z' + [K_Z]     > '̂'
'X' + [K_X]     > '̆'

c additional rules (emailed in May 30, 2021)

store(vx)   'EUIYOAeuiyoa'

any(vx) + [K_X]         > index(vx,1) U+0306
any(vx) + [SHIFT K_X]   > index(vx,1) U+0306

store(vvx)  'ÊƯÔÂêưôâ'

any(vvx) + [K_X]        > index(vvx,1) U+0306 
any(vvx) + [SHIFT K_X]  > index(vvx,1) U+0306

store(ou_wx)  'ơưƠƯ'

any(ou_wx) + [K_X]           > index(ou_wx,1) U+0306 
any(ou_wx) + [SHIFT K_X]     > index(ou_wx,1) U+0306 




c EoF
