store(&VERSION) "10.0"
store(&KEYBOARDVERSION) '9.3'
store(&TARGETS) "any"
c store(&ETHNOLOGUECODE) "lil"
store(&COPYRIGHT) '© 2008-2024 FirstVoices, SIL International. Portions © 2006 Chris Harvey'
store(&NAME) 'Sƛ̓aƛ̓imxəc'
store(&BITMAP) 'fv_stlatlimxec.ico'
store(&VISUALKEYBOARD) 'fv_stlatlimxec.kvks'
store(&KMW_HELPFILE) 'fv_stlatlimxec_help.htm'
begin Unicode > use(main)                      
group(main) using keys   

c --- START OF TOUCH LAYOUT RULES ---

c Touch layout rules originally imported from KeyMap.plist on Tue Nov 17 2015

store(&LAYOUTFILE) 'fv_stlatlimxec.keyman-touch-layout'

+ [SHIFT T_Q_0] > 'Q̓' layer('default')
+ [SHIFT T_Q] > 'Q' layer('default')
+ [SHIFT T_W_0] > 'W̓' layer('default')
+ [SHIFT T_W] > 'W' layer('default')
+ [SHIFT T_E_0] > 'Ə́' layer('default')
+ [SHIFT T_E_1] > 'Ə̣' layer('default')
+ [SHIFT T_E_2] > U+018F U+0323 U+0301 layer('default') c 'Ə̣́'
+ [SHIFT T_E] > 'Ə' layer('default')
'ƛ̓' + [SHIFT T_R] > 'ƛ̓'
+ [SHIFT T_T] > 'T' layer('default')
+ [SHIFT T_Y_0] > 'Y̓' layer('default')
+ [SHIFT T_Y] > 'Y' layer('default')
+ [SHIFT T_U_0] > 'Ú' layer('default')
+ [SHIFT T_U_1] > 'Ụ' layer('default')
+ [SHIFT T_U_2] > U+1EE4 U+0301 layer('default') c 'Ụ́ 
+ [SHIFT T_U] > 'U' layer('default')
+ [SHIFT T_I_0] > 'Í' layer('default')
+ [SHIFT T_I_1] > 'Ị' layer('default')
+ [SHIFT T_I_2] > U+1ECA U+0301 layer('default') c 'Ị́' 
+ [SHIFT T_I] > 'I' layer('default')
+ [SHIFT T_O] > 'ƛ̓' layer('default')
+ [SHIFT T_P_0] > 'P̓' layer('default')
+ [SHIFT T_P] > 'P' layer('default')
+ [SHIFT T_A_0] > 'Á' layer('default')
+ [SHIFT T_A_1] > 'Ạ' layer('default')
+ [SHIFT T_A_2] > U+1EA0 U+0301 layer('default') c 'Ạ́' 
+ [SHIFT T_A] > 'A' layer('default')
+ [SHIFT T_S_0] > 'Ṣ' layer('default')
+ [SHIFT T_S] > 'S' layer('default')
+ [SHIFT T_D] > 'ʔ' layer('default')
+ [SHIFT T_G_0] > 'Ɣ̓' layer('default')
+ [SHIFT T_G] > 'Ɣ' layer('default')
+ [SHIFT T_H] > 'H' layer('default')
+ [SHIFT T_J] > 'ᵂ' layer('default')
+ [SHIFT T_K_0] > 'K̓' layer('default')
+ [SHIFT T_K] > 'K' layer('default')
+ [SHIFT T_L_0] > 'L̓' layer('default')
+ [SHIFT T_L_1] > 'Ḷ' layer('default')
+ [SHIFT T_L_2] > U+1E36 U+0313 layer('default') c 'Ḷ̓'
+ [SHIFT T_L] > 'L' layer('default')
+ [SHIFT T_COLON] > 'ɬ' layer('default')
+ [SHIFT T_Z_0] > 'Z̓' layer('default')
+ [SHIFT T_Z] > 'Z' layer('default')
+ [SHIFT T_X] > 'X' layer('default')
+ [SHIFT T_C_0] > 'C̓' layer('default')
+ [SHIFT T_C_1] > 'C̣' layer('default')
+ [SHIFT T_C] > 'C' layer('default')
+ [SHIFT T_V] > 'X̌' layer('default')
+ [SHIFT T_N_0] > 'ʕ̓' layer('default')
+ [SHIFT T_N] > 'ʕ' layer('default')
+ [SHIFT T_M_0] > 'N̓' layer('default')
+ [SHIFT T_M] > 'N' layer('default')
+ [SHIFT T_COMMA_0] > 'M̓' layer('default')
+ [SHIFT T_COMMA] > 'M' layer('default')
+ [T_Q_0] > 'q̓'
+ [T_Q] > 'q'
+ [T_W_0] > 'w̓'
+ [T_W] > 'w'
+ [T_E_0] > 'ə́'
+ [T_E_1] > 'ə̣'
+ [T_E_2] > U+0259 U+0323 U+0301 c 'ə̣́'
+ [T_E] > 'ə'
'ƛ̓' + [T_R] > 'ƛ̓'
+ [T_T] > 't'
+ [T_Y_0] > 'y̓'
+ [T_Y] > 'y'
+ [T_U_0] > 'ú'
+ [T_U_1] > 'ụ'
+ [T_U_2] > U+1EE5 U+0301 c 'ụ́'
+ [T_U] > 'u'
+ [T_I_0] > 'í'
+ [T_I_1] > 'ị'
+ [T_I_2] > U+1ECB U+0301 c 'ị́'
+ [T_I] > 'i'
+ [T_O] > 'ƛ̓'
+ [T_P_0] > 'p̓'
+ [T_P] > 'p'
+ [T_A_0] > 'á'
+ [T_A_1] > 'ạ'
+ [T_A_2] > U+1EA1 U+0301 c 'ạ́'
+ [T_A] > 'a'
+ [T_S_0] > 'ṣ'
+ [T_S] > 's'
+ [T_D] > 'ʔ'
+ [T_G_0] > 'ɣ̓'
+ [T_G] > 'ɣ'
+ [T_H] > 'h'
+ [T_J] > 'ʷ'
+ [T_K_0] > 'k̓'
+ [T_K] > 'k'
+ [T_L_0] > 'l̓'
+ [T_L_1] > 'ḷ'
+ [T_L_2] > U+1E37 U+0313 c 'ḷ̓'
+ [T_L] > 'l'
+ [T_COLON] > 'ɬ'
+ [T_Z_0] > 'z̓'
+ [T_Z] > 'z'
+ [T_X] > 'x'
+ [T_C_0] > 'c̓'
+ [T_C_1] > 'c̣'
+ [T_C] > 'c'
+ [T_V] > 'x̌'
+ [T_N_0] > 'ʕ̓'
+ [T_N] > 'ʕ'
+ [T_M_0] > 'n̓'
+ [T_M] > 'n'
+ [T_COMMA_0] > 'm̓'
+ [T_COMMA] > 'm'

c --- END OF TOUCH LAYOUT RULES ---

c --- CROSS PLATFORM STORES AND RULES ---

store(NeedsAcute) 'aiuAIU'
store(HasAcute) 'áíúÁÍÚ'
store(AcuteKeys) [T_F] [SHIFT T_F] [NCAPS K_COLON]
store(NeedsComApos) 'cklmnpqwyzɣCKLMNPQWYZƔʕ'
store(ComAposKeys) [T_R] [SHIFT T_R] [NCAPS K_QUOTE]
store(NeedsDotBelow1) 'lsLS'
store(NeedsDotBelow2) 'cəCƏ'
store(VowelsNeedDotBelow) 'aiuAIU'
store(HasDotBelow) 'ḷṣḶṢ'
store(VowelsHasDotBelow) 'ạịụẠỊỤ'
store(BelowDotKeys) [T_B] [SHIFT T_B] [NCAPS K_1]

c --- building chars with diacritic ---

any(NeedsAcute) + any(AcuteKeys) > index(HasAcute,1)
any(NeedsComApos) + any(ComAposKeys) > index(NeedsComApos,1) U+0313
any(NeedsDotBelow1) + any(BelowDotKeys) > index(HasDotBelow,1)
any(NeedsDotBelow2) + any(BelowDotKeys) > index(NeedsDotBelow2,1) U+0323
any(VowelsNeedDotBelow) + any(BelowDotKeys) > index(VowelsHasDotBelow,1)
'ə' + any(AcuteKeys) > 'ə́'
'l' + any(ComAposKeys) > 'l̓'
'Ə' + any(AcuteKeys) > 'Ə́'
'L' + any(ComAposKeys) > 'L̓'

c --- building multi-diacritic chars ---

any(HasAcute) + any(BelowDotKeys) > index(VowelsHasDotBelow,1) U+0301
any(VowelsHasDotBelow) + any(AcuteKeys) > index(VowelsHasDotBelow,1) U+0301
'ə̣' + any(AcuteKeys) > 'ə̣́'
'Ə̣' + any(AcuteKeys) > 'Ə̣́'
'ə́' + any(BelowDotKeys) > 'ə̣́'
'Ə́' + any(BelowDotKeys) > 'Ə̣́'
'ḷ' + any(ComAposKeys) > 'ḷ̓'
'Ḷ' + any(ComAposKeys) > 'Ḷ̓'
'l̓' + any(BelowDotKeys) > 'ḷ̓'
'L̓' + any(BelowDotKeys) > 'Ḷ̓'


c *************
c constraints
c *************

store(topaccent)  U+0300 U+0301 U+0313 U+030C 
store(topaccentkey) [NCAPS K_BKQUOTE] [NCAPS K_COLON] [NCAPS K_QUOTE ] [NCAPS SHIFT K_6]

any(topaccent) + any(topaccentkey) > context beep

store(lowaccent) U+0323 
any(lowaccent) + [NCAPS K_1] > context beep
any(lowaccent) any(topaccent) + [NCAPS K_1] > context beep
                  
store(NumbersAndPunctuation) '1234567890-=[]\;,./`~!@#$%^&*()_+{}|:"<>?' "'"  c preventing accents on non-letters
any(NumbersAndPunctuation) + any(topaccentkey) > context beep                   
any(NumbersAndPunctuation) + [NCAPS K_1] > context beep
any(HasAcute) + any(topaccentkey) > context beep
any(HasDotBelow) + [NCAPS K_1] > context beep
any(VowelsHasDotBelow) + [NCAPS K_1] > context beep


c original values
+ [SHIFT RALT K_RBRKT] > '}'
+ [SHIFT RALT K_LBRKT] > '{'
+ [RALT K_LBRKT] > '['
+ [RALT K_RBRKT] > ']'
+ [SHIFT RALT K_EQUAL] > '›'
+ [SHIFT RALT K_HYPHEN] > '‹'
+ [RALT K_EQUAL] > '»'
+ [RALT K_HYPHEN] > '«'
+ [NCAPS SHIFT RALT K_0] > ')'
+ [NCAPS SHIFT RALT K_9] > '('
+ [NCAPS SHIFT RALT K_8] > '*'
+ [NCAPS SHIFT RALT K_7] > '&'
+ [NCAPS SHIFT RALT K_6] > '^'
+ [NCAPS SHIFT RALT K_5] > '%'
+ [NCAPS SHIFT RALT K_4] > '$'
+ [NCAPS SHIFT RALT K_3] > '#'
+ [NCAPS SHIFT RALT K_2] > '@'
+ [NCAPS SHIFT RALT K_1] > '!'
+ [NCAPS RALT K_0] > '0'
+ [NCAPS RALT K_9] > '9'
+ [NCAPS RALT K_8] > '8'
+ [NCAPS RALT K_7] > '7'
+ [NCAPS RALT K_6] > '6'
+ [NCAPS RALT K_5] > '5'
+ [NCAPS RALT K_4] > '4'
+ [NCAPS RALT K_3] > '3'
+ [NCAPS RALT K_2] > '2'
+ [NCAPS RALT K_1] > '1'
+ [NCAPS RALT K_QUOTE] > U+0027  

+ [CAPS SHIFT RALT K_N] > 'ŋ'  
+ [NCAPS SHIFT RALT K_N] > 'Ŋ'  
+ [CAPS RALT K_N] > 'Ŋ'
+ [NCAPS RALT K_N] > 'ŋ'    

c quotes

+ [SHIFT K_RBRKT] > U+201D
+ [SHIFT K_LBRKT] > U+201C  

+ [K_RBRKT] > U+2019
+ [K_LBRKT] > U+2018

c language

+ [CAPS K_9] > 'Ɬ'
+ [CAPS K_8] > U+A7DA U+0313 c capital barred lambda with combining above comma
+ [CAPS K_7] > 'X̌'
+ [CAPS K_5] > "Ɣ"
+ [CAPS K_3] > 'Ə'
+ [CAPS K_2] > 'ᵂ' 
                                   
+ [NCAPS shift K_9] > 'Ɬ'
+ [NCAPS SHIFT K_8] > U+A7DA U+0313 c capital barred lambda with combining above comma
+ [NCAPS SHIFT K_7] > 'X̌'
+ [NCAPS SHIFT K_5] > "Ɣ"
+ [NCAPS SHIFT K_3] > 'Ə'
+ [NCAPS SHIFT K_2] > 'ᵂ' 

+ [CAPS shift K_9] > 'ɬ'
+ [CAPS SHIFT K_8] > 'ƛ̓'
+ [CAPS SHIFT K_7] > 'x̌'
+ [CAPS SHIFT K_5] > 'ɣ'
+ [CAPS SHIFT K_3] > "ə"
+ [CAPS SHIFT K_2] > 'ʷ'

+ [NCAPS K_0] > 'ʕ'
+ [NCAPS K_9] > 'ɬ'
+ [NCAPS K_8] > 'ƛ̓'
+ [NCAPS K_7] > 'x̌'
+ [NCAPS K_6] > '·'
+ [NCAPS K_5] > 'ɣ'
+ [NCAPS K_4] > "ʔ"
+ [NCAPS K_3] > "ə"
+ [NCAPS K_2] > 'ʷ'
+ [NCAPS K_1] > U+0323    c lowdot                          

+ [NCAPS SHIFT K_6] > U+030C      c hacek   
+ "<" > "("
+ ">" > ")"  
+ [NCAPS K_COLON] > U+0301  c acute 
+ [NCAPS K_QUOTE] > U+0313  c apostrophe
+ [NCAPS K_BKQUOTE] > U+0300  c grave     


match > use(normalize)
nomatch > use(x)

group(normalize)

any(topaccent) any(lowaccent) > context(2) context(1)


group(x) using keys

