c fv_ojibwa_rdot generated from template at 2024-06-18 23:21:11
c with name "fv_ojibwa_rdot"
store(&VERSION) '10.0'
store(&COPYRIGHT) '© 2024 FirstVoices, First Peoples' U+0027 ' Cultural Council'
store(&KEYBOARDVERSION) '1.0.2'
store(&TARGETS) 'any'
store(&VISUALKEYBOARD) 'fv_ojibwa_rdot.kvks'
store(&LAYOUTFILE) 'fv_ojibwa_rdot.keyman-touch-layout'
store(&NAME) 'ᐁᓂᔑᓇᐯᒧᐏᓐ (Ojibwa, a-finals, right w-dot)'

begin Unicode > use(main)

group(main) using keys

c --- START OF TOUCH LAYOUT RULES ---

+ [SHIFT T_Q] > 'ᐁ'
+ [SHIFT T_W_0] > 'ᕓ'
+ [SHIFT T_W] > 'ᐯ'
+ [SHIFT T_E_0] > 'ᕞ'
+ [SHIFT T_E] > 'ᑌ'
+ [SHIFT T_R] > 'ᑫ'
+ [SHIFT T_T] > 'ᒉ'
+ [SHIFT T_Y] > 'ᒣ'
+ [SHIFT T_U_0] > 'ᓓ'
+ [SHIFT T_U_1] > 'ᕃ'
+ [SHIFT T_U] > 'ᓀ'
+ [SHIFT T_I] > 'ᓭ'
+ [SHIFT T_O] > 'ᔐ'
+ [SHIFT T_P] > 'ᔦ'
+ [SHIFT T_A] > 'ᐅ'
+ [SHIFT T_S_0] > 'ᕗ'
+ [SHIFT T_S] > 'ᐳ'
+ [SHIFT T_D_0] > 'ᕤ'
+ [SHIFT T_D] > 'ᑐ'
+ [SHIFT T_F] > 'ᑯ'
+ [SHIFT T_G] > 'ᒍ'
+ [SHIFT T_H] > 'ᒧ'
+ [SHIFT T_J_0] > 'ᓗ'
+ [SHIFT T_J_1] > 'ᕈ'
+ [SHIFT T_J] > 'ᓄ'
+ [SHIFT T_K] > 'ᓱ'
+ [SHIFT T_L] > 'ᔓ'
+ [SHIFT T_COLON] > 'ᔪ'
+ [SHIFT T_Z_0] > 'ᓫ'
+ [SHIFT T_Z] > 'ᓬ'
+ [SHIFT T_X_0] > 'ᕑ'
+ [SHIFT T_X] > 'ᕒ'
+ [SHIFT T_C] > 'ᐤ'
+ [SHIFT T_V] > 'ᐦ'
+ [SHIFT T_B] > 'ᐞ'
+ [SHIFT T_N] > 'ᣝ'
+ [SHIFT T_M_0] > 'ᕆ'
+ [SHIFT T_M_1] > 'ᕊ'
+ [SHIFT T_M_2] > 'ᕍ'
+ [SHIFT T_M_3] > 'ᔆ'
+ [SHIFT T_M] > 'ᕃ'
+ [SHIFT T_COMMA_0] > 'ᖋ'
+ [SHIFT T_COMMA_1] > 'ᖌ'
+ [SHIFT T_COMMA_2] > 'ᖍ'
+ [SHIFT T_COMMA_3] > 'ᙆ'
+ [SHIFT T_COMMA] > 'ᖊ'
+ [SHIFT T_x66] > 'ᐧ'
+ [T_Q] > 'ᐃ'
+ [T_W_0] > 'ᕕ'
+ [T_W] > 'ᐱ'
+ [T_E_0] > 'ᕠ'
+ [T_E] > 'ᑎ'
+ [T_R] > 'ᑭ'
+ [T_T] > 'ᒋ'
+ [T_Y] > 'ᒥ'
+ [T_U_0] > 'ᓕ'
+ [T_U_1] > 'ᕆ'
+ [T_U] > 'ᓂ'
+ [T_I] > 'ᓯ'
+ [T_O] > 'ᔑ'
+ [T_P] > 'ᔨ'
+ [T_A] > 'ᐊ'
+ [T_S_0] > 'ᕙ'
+ [T_S] > 'ᐸ'
+ [T_D_0] > 'ᕦ'
+ [T_D] > 'ᑕ'
+ [T_F] > 'ᑲ'
+ [T_G] > 'ᒐ'
+ [T_H] > 'ᒪ'
+ [T_J_0] > 'ᓚ'
+ [T_J_1] > 'ᕋ'
+ [T_J] > 'ᓇ'
+ [T_K] > 'ᓴ'
+ [T_L] > 'ᔕ'
+ [T_COLON] > 'ᔭ'
+ [T_Z_0] > 'ᕝ'
+ [T_Z] > 'ᑉ'
+ [T_X_0] > 'ᕪ'
+ [T_X] > 'ᑦ'
+ [T_C] > 'ᒃ'
+ [T_V] > 'ᒡ'
+ [T_B] > 'ᒻ'
+ [T_N_0] > 'ᓪ'
+ [T_N_1] > 'ᕐ'
+ [T_N] > 'ᓐ'
+ [T_M] > 'ᔅ'
+ [T_COMMA] > 'ᔥ'
+ [T_PERIOD] > 'ᔾ'
+ [T_x66] > 'ᐧ'

store(NoDotE) 'ᐁᐯᑌᑫᒉᒣᓀᓭᔐᔦᓓ'
store(DotE)'ᐍᐻᑘᑵᒓᒭᓊᓷᔘᔰᓝ'
store(EKeys) [SHIFT T_Q] [SHIFT T_W] [SHIFT T_E] [SHIFT T_R] [SHIFT T_T] [SHIFT T_Y] [SHIFT T_U] [SHIFT T_I] [SHIFT T_O] [SHIFT T_P] [SHIFT T_T_0]
any(NoDotE) + any(DotKey) > index(DotE,1)

store(SNoDot) 'ᐃᐅᐊᐱᐳᐸᑎᑐᑕᑭᑯᑲᒋᒍᒐᒥᒧᒪᓯᓱᓴᔑᔓᔕᔨᔪᔭᓕᓗᓚ'
store(LNoDot) 'ᐄᐆᐋᐲᐴᐹᑏᑑᑖᑮᑰᑳᒌᒎᒑᒦᒨᒫᓰᓲᓵᔒᔔᔖᔩᔫᔮᓖᓢᓛ'
store(SDot) 'ᐏᐓᐘᐽᑁᑅᑚᑞᑢᑷᑻᑿᒕᒙᒝᒯᒳᒷᓹᓽᔁᔚᔞᔢᔲᔶᔺᓟᓣᓧ'
store(LDot) 'ᐑᐕᐚᐿᑃᑇᑜᑠᑤᑹᑽᒁᒗᒛᒟᒱᒵᒹᓻᓿᔃᔜᔠᔤᔴᔸᔼᓡᓥᓩ'
store(LongKey) [T_x68]
store(DotKey) [T_x66] [SHIFT T_x66]

any(SNoDot) + any(DotKey) > index(SDot,1)
any(SNoDot) + any(LongKey) > index(LNoDot,1)
any(SDot) + any(LongKey) > index(LDot,1)
any(LNoDot) + any(DotKey) > index(LDot,1)
'ᐞ' + [T_x66] > 'ᣝ' 

store(NoDotN) 'ᓂᓄᓇ'
store(LongN) 'ᓃᓅᓈ'
any(NoDotN) + any(LongKey) > index(LongN,1)
'ᓇ' + any(DotKey) > 'ᓌ'
'ᓈ' + any(DotKey) > 'ᓎ'
'ᓌ' + any(LongKey) > 'ᓎ'

c irregular rules
any(FShortVowels) + any(LongKey) > index(FLongVowels,1)
any(THShortVowels) + any(LongKey) > index(THLongVowels,1)
'ᕙᐧ' + any(LongKey) > 'ᕜ'
'ᕚ' + any(DotKey) > 'ᕜ'
'ᕦᐧ' + any(LongKey) > 'ᕩ'
'ᕧ' + any(DotKey) > 'ᕩ'

c n-modified ᕄᕆᕊᕍ
store(NoDotR) 'ᕆᕈᕋ'
store(LongR) 'ᕇᕉᕌ'
any(NoDotR) + any(LongKey) > index(LongR,1)
'ᕋᐧ' + any(LongKey) > 'ᕏ'
'ᕌ' + any(DotKey) > 'ᕏ'


c --- END OF TOUCH LAYOUT RULES ---


c --- START OF DESKTOP RULES ---
c syllabic stores
store(VowelKeys) [K_I] [K_O] [K_A]
store(ShortVowels) 'ᐃᐅᐊ' c i o a 
store(LongVowels) 'ᐄᐆᐋ' c ii oo aa

store(WShortVowels) 'ᐏᐓᐘ' c wi wo wa
store(WLongVowels) 'ᐑᐕᐚ' c wii woo waa

store(BPShortVowels) 'ᐱᐳᐸ' c bi bo ba / pi po pa
store(BPLongVowels) 'ᐲᐴᐹ' c bii boo baa / pii poo paa
store(BPWShortVowels) 'ᐽᑁᑅ' c bwi bwo bwa / pwi pwo pwa
store(BPWLongVowels) 'ᐿᑃᑇ' c bwii bwoo bwaa / pwii pwoo pwaa

store(DTShortVowels) 'ᑎᑐᑕ' c di do da / ti to ta
store(DTLongVowels) 'ᑏᑑᑖ' c dii doo daa / tii too taa
store(DTWShortVowels) 'ᑚᑞᑢ' c dwi dwo dwa / twi two twa
store(DTWLongVowels) 'ᑜᑠᑤ' c dwii dwoo dwaa / twii twoo twaa

store(GKShortVowels) 'ᑭᑯᑲ' c gi go ga / ki ko ka
store(GKLongVowels) 'ᑮᑰᑳ' c gii goo gaa / kii koo kaa
store(GKWShortVowels) 'ᑷᑻᑿ' c gwi gwo gwa / kwi kwo kwa
store(GKWLongVowels) 'ᑹᑽᒁ' c gwii gwoo gwaa / kwii kwoo kwaa

store(JCHShortVowels) 'ᒋᒍᒐ' c ji jo ja / chi cho cha
store(JCHLongVowels) 'ᒌᒎᒑ' c jii joo jaa / chii choo chaa
store(JCHWShortVowels) 'ᒕᒙᒝ' c jwi jwo jwa / chwi chwo chwa
store(JCHWLongVowels) 'ᒗᒛᒟ' c jwii jwoo jwaa / chwii chwoo chwaa

store(MShortVowels) 'ᒥᒧᒪ' c mi mo ma
store(MLongVowels) 'ᒦᒨᒫ' c mii moo maa
store(MWShortVowels) 'ᒯᒳᒷ' c mwi mwo mwa
store(MWLongVowels) 'ᒱᒵᒹ' c mwii mwoo mwaa

store(NShortVowels) 'ᓂᓄᓇ' c ni no na
store(NLongVowels) 'ᓃᓅᓈ' c nii noo naa

store(SZShortVowels) 'ᓯᓱᓴ' c si so sa / zi zo za
store(SZLongVowels) 'ᓰᓲᓵ' c sii soo saa / zii zoo zaa
store(SZWShortVowels) 'ᓹᓽᔁ' c swi swo swa / zwi zwo zwa
store(SZWLongVowels) 'ᓻᓿᔃ' c swii swoo swaa / zwii zwoo zwaa

store(SHZHShortVowels) 'ᔑᔓᔕ' c shi sho sha / zhi zho zha
store(SHZHLongVowels) 'ᔒᔔᔖ' c shii shoo shaa / zhii zhoo zhaa
store(SHZHWShortVowels) 'ᔚᔞᔢ' c shwi shwo shwa / zhwi zwho zhwa
store(SHZHWLongVowels) 'ᔜᔠᔤ' c shwii shwoo shwaa / zhwii zhwoo zhwaa

store(YShortVowels) 'ᔨᔪᔭ' c yi yo ya
store(YLongVowels) 'ᔩᔫᔮ' c yii yoo yaa
store(YWShortVowels) 'ᔲᔶᔺ' c ywi ywo ywa
store(YWLongVowels) 'ᔴᔸᔼ' c ywii ywoo ywaa

store(FShortVowels) 'ᕕᕗᕙ' c fi fo fa
store(FLongVowels) 'ᕖᕘᕚ' c fii foo faa

store(THShortVowels) 'ᕠᕤᕦ'
store(THLongVowels) 'ᕢᕥᕧ'

c modified n-variant 
store(LShortVowels) 'ᓕᓗᓚ' c li lo la
store(LLongVowels) 'ᓖᓘᓛ' c lii loo laa
store(LWShortVowels) 'ᓟᓣᓧ' c lwi lwo lwa
store(LWLongVowels) 'ᓡᓥᓩ' c lwii lwoo lwaa

store(RShortVowels) 'ᕆᕈᕋ' c ri ro ra 
store(RLongVowels) 'ᕇᕉᕌ' c rii roo raa

c roman catholic variant
store(L2ShortVowels) 'ᕆᕊᕍ' c li lo la

store(R2ShortVowels) 'ᖋᖌᖍ' c ri ro ra

c Standalone Vowels

+ 'e' > 'ᐁ'
+ 'i' > 'ᐃ'
'ᐃ' + [K_I] > 'ᐄ'
+ 'o' > 'ᐅ'
'ᐅ' + [K_O] > 'ᐆ'
+ 'a' > 'ᐊ'
'ᐊ' + [K_A] > 'ᐋ'
'ᐁ' + [K_W] > 'ᐍ'
any(ShortVowels) + [K_W] > index(WShortVowels,1)
any(LongVowels) + [K_W] > index(WLongVowels,1)
any(ShortVowels) + [K_Q] > index(WShortVowels,1)
any(LongVowels) + [K_Q] > index(WLongVowels,1)
any(LongVowels) + [K_BKSP] > index(ShortVowels,1)
'ᐁ' + [K_Q] > 'ᐍ'

c Standalone Consonants

+ 'h' > 'ᐦ'
+ [K_L] > 'ᓬ'
+ [SHIFT K_L] > 'ᓫ'
+ [K_R] > 'ᕒ'
+ [SHIFT K_R] > 'ᕑ'

c Syllable Building
+ [K_B] > 'ᑉ'
+ [K_P] > 'ᑉ'
'ᑉ' + [K_E] > 'ᐯ'
'ᑉ' + any(VowelKeys) > index(BPShortVowels,2)
any(BPShortVowels) + any(VowelKeys) > index(BPLongVowels,1)
any(BPLongVowels) + [K_BKSP] > index(BPShortVowels,1)
'ᑉ' + [K_W] > 'ᐻ'
'ᐯ' + [K_Q] > 'ᐻ'
'ᐻ' + [K_E] > 'ᐻ'
'ᐻ' + any(VowelKeys) > index(BPWShortVowels,2)
any(BPWShortVowels) + any(VowelKeys) > index(BPWLongVowels,1)
any(BPWLongVowels) + [K_BKSP] > index(BPWShortVowels,1)

+ [K_D] > 'ᑦ'
+ [K_T] > 'ᑦ'
'ᑦ' + [K_E] > 'ᑌ'
'ᑦ' + any(VowelKeys) > index(DTShortVowels,2)
any(DTShortVowels) + any(VowelKeys) > index(DTLongVowels,1)
any(DTLongVowels) + [K_BKSP] > index(DTShortVowels,1)
'ᑦ' + [K_W] > 'ᑘ'
'ᑌ' + [K_Q] > 'ᑘ'
'ᑘ' + [K_E] > 'ᑘ'
'ᑘ' + any(VowelKeys) > index(DTWShortVowels,2)
any(DTWShortVowels) + any(VowelKeys) > index(DTWLongVowels,1)
any(DTWLongVowels) + [K_BKSP] > index(DTWShortVowels,1)

+ [K_G] > 'ᒃ'
+ [K_K] > 'ᒃ'
'ᒃ' + [K_E] > 'ᑫ'
'ᒃ' + any(VowelKeys) > index(GKShortVowels,2)
any(GKShortVowels) + any(VowelKeys) > index(GKLongVowels,1)
any(GKLongVowels) + [K_BKSP] > index(GKShortVowels,1)
'ᒃ' + [K_W] > 'ᑵ'
'ᑫ' + [K_Q] > 'ᑵ'
'ᑵ' + [K_E] > 'ᑵ'
'ᑵ' + any(VowelKeys) > index(GKWShortVowels,2)
any(GKWShortVowels) + any(VowelKeys) > index(GKWLongVowels,1)
any(GKWLongVowels) + [K_BKSP] > index(GKWShortVowels,1)

+ [K_J] > 'ᒡ'
+ [SHIFT K_C] > 'ᒡ'
'ᒡ' + [K_E] > 'ᒉ'
'ᒡ' + any(VowelKeys) > index(JCHShortVowels,2)
any(JCHShortVowels) + any(VowelKeys) > index(JCHLongVowels,1)
any(JCHLongVowels) + [K_BKSP] > index(JCHShortVowels,1)
'ᒡ' + [K_W] > 'ᒓ'
'ᒉ' + [K_Q] > 'ᒓ'
'ᒓ' + [K_E] > 'ᒓ'
'ᒓ' + any(VowelKeys) > index(JCHWShortVowels,2)
any(JCHWShortVowels) + any(VowelKeys) > index(JCHWLongVowels,1)
any(JCHWLongVowels) + [K_BKSP] > index(JCHWShortVowels,1)

+ [K_M] > 'ᒻ'
'ᒻ' + [K_E] > 'ᒣ'
'ᒻ' + any(VowelKeys) > index(MShortVowels,2)
any(MShortVowels) + any(VowelKeys) > index(MLongVowels,1)
any(MLongVowels) + [K_BKSP] > index(MShortVowels,1)
'ᒻ' + [K_W] > 'ᒭ'
'ᒣ' + [K_Q] > 'ᒭ'
'ᒭ' + [K_E] > 'ᒭ'
'ᒭ' + any(VowelKeys) > index(MWShortVowels,2)
any(MWShortVowels) + any(VowelKeys) > index(MWLongVowels,1)
any(MWLongVowels) + [K_BKSP] > index(MWShortVowels,1)

+ [K_N] > 'ᓐ'
'ᓐ' + [K_E] > 'ᓀ'
'ᓐ' + any(VowelKeys) > index(NShortVowels,2)
any(NShortVowels) + any(VowelKeys) > index(NLongVowels,1)
any(NShortVowels) + [K_BKQUOTE] > index(NLongVowels,1)
any(NLongVowels) + [K_BKSP] > index(NShortVowels,1)
'ᓐ' + [K_W] > 'ᓊ'
'ᓇ' + [K_Q] > 'ᓌ'
'ᓀ' + [K_Q] > 'ᓊ'
'ᓊ' + [K_E] > 'ᓊ'
'ᓊ' + [K_A] > 'ᓌ'
'ᓌ' + [K_A] > 'ᓎ'
'ᓌ' + [K_BKQUOTE] > 'ᓎ'
'ᓈ' + [K_Q] > 'ᓎ'
'ᓎ' + [K_BKSP] > 'ᓌ'

+ [K_S] > 'ᔅ'
+ [K_Z] > 'ᔅ'
'ᔅ' + [K_E] > 'ᓭ'
'ᔅ' + any(VowelKeys) > index(SZShortVowels,2)
any(SZShortVowels) + any(VowelKeys) > index(SZLongVowels,1)
any(SZLongVowels) + [K_BKSP] > index(SZShortVowels,1)
'ᔅ' + [K_W] > 'ᓷ'
'ᓭ' + [K_Q] > 'ᓷ'
'ᓷ' + [K_E] > 'ᓷ'
'ᓷ' + any(VowelKeys) > index(SZWShortVowels,2)
any(SZWShortVowels) + any(VowelKeys) > index(SZWLongVowels,1)
any(SZWLongVowels) + [K_BKSP] > index(SZWShortVowels,1)

+ [SHIFT K_S] > 'ᔥ'
+ [SHIFT K_Z] > 'ᔥ'
'ᔥ' + [K_E] > 'ᔐ'
'ᔥ' + any(VowelKeys) > index(SHZHShortVowels,2)
any(SHZHShortVowels) + any(VowelKeys) > index(SHZHLongVowels,1)
any(SHZHLongVowels) + [K_BKSP] > index(SHZHShortVowels,1)
'ᔥ' + [K_W] > 'ᔘ'
'ᔐ' + [K_Q] > 'ᔘ'
'ᔘ' + [K_E] > 'ᔘ'
'ᔘ' + any(VowelKeys) > index(SHZHWShortVowels,2)
any(SHZHWShortVowels) + any(VowelKeys) > index(SHZHWLongVowels,1)
any(SHZHWLongVowels) + [K_BKSP] > index(SHZHWShortVowels,1)

+ [K_Y] > 'ᔾ'
'ᔾ' + [K_E] > 'ᔦ'
'ᔾ' + any(VowelKeys) > index(YShortVowels,2)
any(YShortVowels) + any(VowelKeys) > index(YLongVowels,1)
any(YLongVowels) + [K_BKSP] > index(YShortVowels,1)
'ᔾ' + [K_W] > 'ᔰ'
'ᔦ' + [K_Q] > 'ᔰ'
'ᔰ' + [K_E] > 'ᔰ'
'ᔰ' + any(VowelKeys) > index(YWShortVowels,2)
any(YWShortVowels) + any(VowelKeys) > index(YWLongVowels,1)
any(YWLongVowels) + [K_BKSP] > index(YWShortVowels,1)

+ [K_W] > 'ᐤ'
+ [SHIFT K_W] > 'ᣝ'
'ᐤ' + [K_E] > 'ᐍ'
'ᐤ' + any(VowelKeys) > index(WShortVowels,2)
any(WShortVowels) + any(VowelKeys) > index(WLongVowels,1)
any(WLongVowels) + [K_BKSP] > index(WShortVowels,1)

+ [K_F] > 'ᕝ'
'ᕝ' + [K_E] > 'ᕓ'
'ᕝ' + any(VowelKeys) > index(FShortVowels,2)
any(FShortVowels) + any(VowelKeys) > index(FLongVowels,1)
any(FShortVowels) + [K_BKQUOTE] > index(FLongVowels,1)
any(FLongVowels) + [K_BKSP] > index(FShortVowels,1)
'ᕝ' + [K_W] > 'ᕓᐧ'
'ᕓ' + [K_Q] > 'ᕓᐧ'
'ᕓᐧ' + [K_E] > 'ᕓᐧ'
'ᕓᐧ' + [K_A] > 'ᕙᐧ'
'ᕙᐧ' + [K_A] > 'ᕜ'
'ᕙᐧ' + [K_BKQUOTE] > 'ᕜ'
'ᕚ' + [K_Q] > 'ᕜ'

+ [SHIFT K_T] > 'ᕪ'
'ᕪ' + [K_E] > 'ᕞ'
'ᕪ' + any(VowelKeys) > index(THShortVowels,2)
any(THShortVowels) + any(VowelKeys) > index(THLongVowels,1)
any(THShortVowels) + [K_BKQUOTE] > index(THLongVowels,1)
'ᕪ' + [K_W] > 'ᕞᐧ'
'ᕞᐧ' + [K_E] > 'ᕞᐧ'
'ᕞ' + [K_Q] > 'ᕞᐧ'
'ᕞᐧ' + [K_A] > 'ᕦᐧ'
'ᕦᐧ' + [K_A] > 'ᕩ'
'ᕦᐧ' + [K_BKQUOTE] > 'ᕩ'


+ [K_HYPHEN] > 'ᓪ'
'ᓪ' + [K_E] > 'ᓓ' 
'ᓪ' + any(VowelKeys) > index(LShortVowels,2)
any(LShortVowels) + any(VowelKeys) > index(LLongVowels,1)
any(LLongVowels) + [K_BKSP] > index(LShortVowels,1)
'ᓪ' + [K_W] > 'ᓝ' 
'ᓓ' + [K_Q] > 'ᓝ'
'ᓝ' + any(VowelKeys) > index(LWShortVowels,2)
any(LWShortVowels) + any(VowelKeys) > index(LWLongVowels,1)
any(LWLongVowels) + [K_BKSP] > index(LWShortVowels,1)

+ [K_EQUAL] > 'ᕐ'
'ᕐ' + [K_E] > 'ᕃ'
'ᕐ' + any(VowelKeys) > index(RShortVowels,2)
any(RShortVowels) + any(VowelKeys) > index(RLongVowels,1)
any(RShortVowels) + [K_BKQUOTE] > index(RLongVowels,1)
any(RLongVowels) + [K_BKSP] > index(RShortVowels,1)
'ᕐ' + [K_W] > 'ᕃᐧ'
'ᕃ' + [K_Q] > 'ᕃᐧ'
'ᕃᐧ' + [K_A] > 'ᕋᐧ'
'ᕋᐧ' + [K_A] > 'ᕏ'
'ᕌ' + [K_Q] > 'ᕏ'
'ᕋᐧ' + [K_BKQUOTE] > 'ᕏ'

+ [K_BKSLASH] > 'ᔆ'
'ᔆ' + [K_E] > 'ᕃ'
'ᔆ' + any(VowelKeys) > index(L2ShortVowels,2)

+ [K_RBRKT] > 'ᙆ'
'ᙆ' + [K_E] > 'ᖊ'
'ᙆ' + any(VowelKeys) > index(R2ShortVowels,2)

c standalone dots
+ [K_Q] > 'ᐧ' c w-dot
+ [K_BKQUOTE] > '̇' c combining dot above

c Building with standalone dots
any(SNoDot) + [K_Q] > index(SDot,1)
any(LNoDot) + [K_Q] > index(LDot,1)
any(SNoDot) + [K_BKQUOTE] > index(LNoDot,1)
any(SDot) + [K_BKQUOTE] > index(LDot,1)

c stacking prevention
any(LDot) + [K_BKQUOTE] > index(LDot,1)
any(LNoDot) + [K_BKQUOTE] > index(LNoDot,1)

c allow building of non-standardised characters
c these rules were added in case these syllables are used within community, but do not currently have a single code point.
c it was decided to have them typed in a different way so that they remain separate from the normalised characters that are all seen on syllabics charts

c FW-
'ᕓᐧ' + [K_I] > 'ᕕᐧ'
'ᕕᐧ' + [K_BKQUOTE] > 'ᕖᐧ'
'ᕓᐧ' + [K_O] > 'ᕗᐧ'
'ᕗᐧ' + [K_BKQUOTE] > 'ᕘᐧ'

c TH-
'ᕞᐧ' + [K_I] > 'ᕠᐧ'
'ᕠᐧ' + [K_BKQUOTE] > 'ᕢᐧ'
'ᕞᐧ' + [K_O] > 'ᕤᐧ'
'ᕤᐧ' + [K_BKQUOTE] > 'ᕥᐧ'

c NW-
'ᓊ' + [K_I] > 'ᓂᐧ'
'ᓂᐧ' + [K_BKQUOTE] > 'ᓃᐧ'
'ᓊ' + [K_O] > 'ᓄᐧ'
'ᓄᐧ' + [K_BKQUOTE] > 'ᓅᐧ'

c Modified N-shape R
'ᕃᐧ' + [K_I] > 'ᕆᐧ'
'ᕆᐧ' + [K_BKQUOTE] > 'ᕇᐧ'
'ᕃ' + [K_O] > 'ᕈᐧ'
'ᕈᐧ' + [K_BKQUOTE] > 'ᕉᐧ'

c punctuation
+ '.' > '᙮'
+ [RALT K_PERIOD] > '.'
+ [K_LBRKT] > deadkey(Deadkey) 
+ [RALT K_LBRKT] > '['
+ [RALT K_RBRKT] > ']'
+ [RALT K_HYPHEN] > '-'
+ [RALT K_EQUAL] > '='
+ [SHIFT RALT K_EQUAL] > '+'
+ [RALT K_COLON] > '‹'
+ [RALT K_QUOTE] > '›'
+ [SHIFT RALT K_COLON] > '«'
+ [SHIFT RALT K_QUOTE] > '»'
+ [RALT K_BKQUOTE] > '`' 

c Allow English letters to be typed on alt layer

store(EnglishKeys) [RALT K_Q] [RALT K_W] [RALT K_E] [RALT K_R] [RALT K_T] [RALT K_Y] [RALT K_U] [RALT K_I] [RALT K_O] [RALT K_P] [RALT K_A] [RALT K_S] [RALT K_D] [RALT K_F] [RALT K_G] [RALT K_H] [RALT K_J] [RALT K_K] [RALT K_L] [RALT K_Z] [RALT K_X] [RALT K_C] [RALT K_V] [RALT K_B] [RALT K_N] [RALT K_M]
store(ShiftedEnglishKeys) [SHIFT RALT K_Q] [SHIFT RALT K_W] [SHIFT RALT K_E] [SHIFT RALT K_R] [SHIFT RALT K_T] [SHIFT RALT K_Y] [SHIFT RALT K_U] [SHIFT RALT K_I] [SHIFT RALT K_O] [SHIFT RALT K_P] [SHIFT RALT K_A] [SHIFT RALT K_S] [SHIFT RALT K_D] [SHIFT RALT K_F] [SHIFT RALT K_G] [SHIFT RALT K_H] [SHIFT RALT K_J] [SHIFT RALT K_K] [SHIFT RALT K_L] [SHIFT RALT K_Z] [SHIFT RALT K_X] [SHIFT RALT K_C] [SHIFT RALT K_V] [SHIFT RALT K_B] [SHIFT RALT K_N] [SHIFT RALT K_M]
store(EnglishLetters) 'qwertyuiopasdfghjklzxcvbnm'
store(ShiftedEnglishLetters) 'QWERTYUIOPASDFGHJKLZXCVBNM'

+ any(EnglishKeys) > index(EnglishLetters,1)
+ any(ShiftedEnglishKeys) > index(ShiftedEnglishLetters,1)


store(nul) 'udxcvQEYUIOPASDFGHJKZXVBNM'
+ any(nul) > nul
