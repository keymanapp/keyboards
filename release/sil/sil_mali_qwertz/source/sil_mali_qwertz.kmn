store(&VERSION) '10.0'
store(&BITMAP) 'sil_mali_qwertz.ico'
store(&COPYRIGHT) '© 2004-2018 SIL Mali'
store(&NAME) 'Clavier du Mali (Qwertz)'
store(&HotKey ) "[K_F11]"
c store(&mnemoniclayout) "0"
c store(&ETHNOLOGUECODE) 'bam bmq bzx bze boo boz dba dbu dtt dux ffm jow mwk myk spp khq ses snk taq kao fra fuc fuf'
store(&MESSAGE) 'Pour toutes les langues au Mali, Afrique de l’Ouest, avec clavier allemand (Deutsch).'
store(&VISUALKEYBOARD) 'sil_mali_qwertz.kvks'
store(&TARGETS) 'windows macosx linux web'
store(&KEYBOARDVERSION) '3.3.1'

begin Unicode > use(Main)

c The basic keyboard was done by Doug Higby for Burkina Faso
c This was modified by Dan Brubaker in 2014.
c All characters are composed as much as practical i.e. one single character instead of two.
c All composed sequences were added by Dan Brubaker in 2014 for Matthias Liebrecht
c The following 2 stores are used with the group(angleit) near the bottom of this table
store(lessthan) [K_oE2] "<"
store(greaterthan) [SHIFT K_oE2] ">"

c Note that the modifying keys FOLLOW the character, just as when one writes.
store(GraveK)  '+' c was '`'  grave OR = American
store(AcuteK)  '=' c was '´'  acute OR + American   
store(CircK)   '`' c 2nd change to ` circumflex OR ^ American 
store(DrsisK)  '%' c 5ok percent sign 
store(MacronK) ')' c was = now ) Mid tone or ) American
store(TildeK)  '$' c was '"'   c ~ OR @ American
store(CaronK)  '(' c 9ok LH OR * American
store(DotUnderK) '#' c was &   

c 7 accents over vowels and nasals
store(modifierK)    $GraveK $AcuteK $CircK $DrsisK $MacronK $TildeK $CaronK $DotUnderK

store(specchar1K)   "ABCDEFGHIJMNOPUWYZabcdefghijmnopsuwyz?VvLlQqSTtxX"

c store(Qwerty)    'qQaAwWzZ12' '3' '4' '567890-!@#$%^&*()_[]{}\|mM,./<>?;:`' "'" '"'
c French keyboard correspondences below
c store(Azerty)    'aAqQzZwW&é' '"' "'" '(-è_çà)1234567890°^$¨£*µ,?;:!./§mM²' "ù" '%'
c German keyboard correspondences below

c store(Qwerty)   'yYzZ#^&*()_=+[]{};:<>/?\-`~\' "|" "'" '"' '@'
c store(German)   'zZyY§&/()=?´`ü+Ü*öÖ;:-_#ß^°+' "'" "ä" 'Ä' '"'         
store(Qwerty)   'y' 'Y' 'z' 'Z' '#' '^' '&' '*' '(' ')' '_' '=' '+' \
                '[' ']' '{' '}' ';' ':' '<' '>' '/' '?' '\' '-' '`' \
                '~' "|" "'" '"' '@'
store(German)   'z' 'Z' 'y' 'Y' '§' '&' '/' '(' ')' '=' '?' '´' '`' \
                'ü' '+' 'Ü' '*' 'ö' 'Ö' ';' ':' '-' '_' '#' 'ß' '^' \
                '°' "'" "ä" 'Ä' '"'         

store(LatinVowel)      "AEIOUaeiou"
store(CompositeAcute)  "Á" "É" U+00CD U+00D3 U+00DA "á" U+00E9 U+00ED U+00F3 U+00FA 
store(CompositeGrave)  "À" "È" U+00CC U+00D2 U+00D9 "à" U+00E8 U+00EC U+00F2 U+00F9 
store(CompositeCirc)   "Â" "Ê" U+00CE U+00D4 U+00DB "â" U+00EA U+00EE U+00F4 U+00FB
store(CompositeNasal)  "Ã" "Ẽ" U+0128 U+00D5 U+0168 "ã" U+1EBD U+0129 U+00F5 U+0169
store(CompositeDrsis)  "Ä" "Ë" U+00CF U+00D6 U+00DC "ä" U+00EB U+00EF U+00F6 U+00FC 
store(CompositeMacron) "Ā" "Ē" "Ī" "Ō" "Ū" "ā" "ē" "ī" "ō" "ū" 
store(CompositeCaron)  "Ǎ" "Ě" "Ǐ" "Ǒ" "Ǔ" "ǎ" "ě" "ǐ" "ǒ" "ǔ" 
store(CompositeDotUnder) "Ạ" "Ẹ" "Ị" "Ọ" "Ụ" U+1EA1 U+1EB9 U+1ECB U+1ECD U+1EE5



c Modify next line to select preferred capital schwa BELOW gives 2 identical scha's CAPITAL is just bigger
store(CapSchwa) U+018E c Backwards E
store(LCSchwa)  U+01DD
c store(CapSchwa) U+018F c  "ǝ" that goes with the "Ə" below
c store(LCSchwa)  U+0259  c "Ə"

c Below Does work - Unchanged from BF table, but here are what the numbers mean in order:
c A     E /backwards E/CAP ESH/I/CAP/IOTA
c O    open O   U    open U    N  CAP/ENG
c ENYA     M      a      e    lc schwa/esh
c i    iota     o    open o    u    open u
c n     eng    enya    m      w      z
c S       s       Z       W
c This is ALL vowels and nasals including the non a-z ones plus s,S. w and z,Z
store(Umodifiable)  U+0041 U+0045 U+018F U+0190 U+0049 U+0196 \
                    U+004F U+0186 U+0055 U+01B2 U+004E U+014A \
                    U+019D U+004D U+0061 U+0065 U+0259 U+025B \
                    U+0069 U+0269 U+006F U+0254 U+0075 U+028B \
                    U+006E U+014B U+0272 U+006D U+0057 U+007A \
                    U+0053 U+0073 U+005A U+0077 "H" "h" "D" "d" "x" \
                    U+02BC U+0268 U+0153 U+00E6 "T" "t" "L" "l" "G" "g" 
store(Composite) outs(CompositeAcute)  outs(CompositeGrave) \
                 outs(CompositeCirc)   outs(CompositeNasal) outs(CompositeDrsis) \
                 outs(CompositeMacron) outs(CompositeCaron) outs(CompositeDotUnder) 

c Added quite a few characters to below
store(Uspecchar1)   U+00BB U+0181 U+00C7 U+018A U+0190 \
                    U+0152 U+014A U+0263 U+0196 U+019D \
                    $CapSchwa U+014A U+0186 U+201D \
                           U+01B2 U+2019 U+01B7 U+01B3 U+00AB \
                    U+0253 U+00E7 U+0257 U+025B U+0153 \
                    U+014B U+0294 U+0269 U+0272 \
                    $LCSchwa U+014B U+0254 U+201C      \
                    ";" U+028B U+2018 U+0292 U+01B4 \
                    U+0294 U+2021 U+2020 U+0251 U+02BC \
                    U+003E U+003C U+0283 U+203A U+2039 \
                    "ɡ" U+2713                  

store(UGrave)    U+0300
store(UAcute)    U+0301
store(UCirc)     U+0302 
store(UTilde)    U+0303
store(UMacron)   U+0304
store(UDrsis)    U+0308
store(UCaron)    U+030C  
store(UDotUnder) U+0323
c 8 accents over vowels and nasals (all but the Tilde which is added in the next store)
store(toneK) $GraveK  $AcuteK $CircK  $DrsisK \
             $MacronK $CaronK $DotUnderK

c the 7 accents again, ALL except for the Tilde which is in the next store after this one.
store(Utone) $UAcute  $UGrave $UCirc $UDrsis \
             $UMacron $UCaron $UDotUnder

store(Umodifier) $UGrave $UAcute $UCirc $UDrsis $UMacron $UTilde $UCaron $UDotUnder

group(Main) using keys             

c The lines below are Virtual keys that replace the Alt Gr sequences

+ [RALT K_HYPHEN] > "\"
+ [RALT K_7] > '{'
+ [RALT K_8] > '['
+ [RALT K_9] > ']'
+ [RALT K_0] > '}'
+ [RALT K_LBRKT] > '\'
+ [RALT K_oE2] > '|'
+ [RALT K_M] > 'µ'
+ [RALT K_EQUAL] > '~'

+ any(Qwerty) >  index(German,1)

c comma before for QWerty AND/OR German (below)
"," + any(specchar1K) > index(Uspecchar1,2)

c "ù" before = "'" for AZerty (below) = accented u
c "ù" + any(specchar1K) > index(Uspecchar1,2)
c "'" + any(specchar1K) > index(Uspecchar1,2) DOES NOT work

c below 2 hyphens goes to Em-dash AND the Apostrophy after jusqu` doesn't go over the u anymore
"q" + "q" > U+2014
"qu" + "+" > "qu’"
"qu" + "=" > "qu’"      
"Qu" + "+" > "Qu’"
"Qu" + "=" > "Qu’"
"d" + "+" > "d’"
"d" + "=" > "d’"      
"l" + "+" > "l’"
"l" + "=" > "l’"      
"L" + "+" > "L’"
"L" + "=" > "L’"
"t" + "+" > "t’"
"t" + "=" > "t’"      
"m" + "+" > "m’"
"m" + "=" > "m’"      
"," + "_" > "’"      

any(LatinVowel) + $AcuteK > index(CompositeAcute,1) c =
any(LatinVowel) + $GraveK > index(CompositeGrave,1) c +
any(LatinVowel) + $CircK > index(CompositeCirc,1)   c `
any(LatinVowel) + $DrsisK > index(CompositeDrsis,1)   c %
any(LatinVowel) + $MacronK > index(CompositeMacron,1)   c )
any(LatinVowel) + $TildeK > index(CompositeNasal,1)   c $
any(LatinVowel) + $CaronK > index(CompositeCaron,1)   c (
any(LatinVowel) + $DotUnderK > index(CompositeDotUnder,1)   c #
                                 
c Extra characters with combined accents
"M" + "=" > "Ḿ" c acute m
"m" + "=" > "ḿ" c acute    DOESN'T WORK!
"N" + "=" > "Ń" c acute n
"n" + "=" > "ń" c acute
"N" + "$" > "Ñ" c tilde
"n" + "$" > "ñ" c tilde
"N" + "+" > "Ň" c caron
"n" + "+" > "ň" c caron
"S" + "+" > "Š" c caron s
"s" + "+" > "š" c caron
"Z" + "+" > "Ž" c caron z
"z" + "+" > "ž" c caron
"w" + "`" > "ẁ" c grave w
c "Ə" + "%" > "Ӛ" c 2 dots schwa
c "ə" + "%" > "ӛ" c 2 dots

any(Composite) + $TildeK > context $UTilde use(fixtilde)
any(CompositeNasal) + any(toneK) > context index(Utone,2)
any(CompositeNasal) any(Utone) + $TildeK > beep context

c Fractions

"!1" + "2" > "½"
"!1" + "4" > "¼"
"!3" + "4" > "¾"
"!1" + "3" > "⅓"
"!2" + "3" > "⅔"
"!1" + "5" > "⅕"
"!2" + "5" > "⅖"
"!3" + "5" > "⅗"
"!4" + "5" > "⅘"
"!1" + "6" > "⅙"
"!5" + "6" > "⅚"
"!1" + "8" > "⅛"
"!3" + "8" > "⅜"
"!5" + "8" > "⅝"
"!7" + "8" > "⅞"

c The following rule is simple diacritic placement with no restructuring involved
c This adds an accent after the remaining vowels (which appears centered over the vowel)
any(Umodifiable) + any(modifierK) > context index(Umodifier,2)

c When adding a second one, one needs to check the order.
c any(Umodifier) + any(modifierK) > context index(Umodifier,2) use(Udiacritics)

U+0251 + any(modifierK) > context index(Umodifier,2)

+ any(lessthan) > U+2039 use(angleit)
+ any(greaterthan) > U+203A use(angleit)

group(angleit)
U+2039 U+2039 > U+00AB
U+00AB U+2039 > context(1) U+00A0 context(2)
U+203A U+203A > U+00BB
U+00BB U+203A > context(2) U+00A0 context(1)

c The above uses a big (regular) No-Break Space U+00A0 between the quotes,
c To get a Narrow No-Break Space between the two guillemets, use U+202F instead

group(fixtilde)
any(CompositeAcute)  $UTilde > index(CompositeNasal,1) $UAcute use(NFC)
any(CompositeGrave)  $UTilde > index(CompositeNasal,1) $UGrave
any(CompositeDrsis)  $UTilde > index(CompositeNasal,1) $UDrsis use(NFC)
any(CompositeCirc)   $UTilde > index(CompositeNasal,1) $UCirc
any(CompositeMacron) $UTilde > index(CompositeNasal,1) $UMacron use(NFC)
any(CompositeCaron)  $UTilde > index(CompositeNasal,1) $UCaron
any(CompositeNasal)  $UTilde any(Utone) > context(1) context(3)

group(Udiacritics)
c Constraints
any(Utone) any(Utone) > beep context(1)
U+0303 any(Utone) U+0303 > beep context(1) context(2)
any(CompositeAcute)  any(Utone) > beep context(1)
any(CompositeGrave)  any(Utone) > beep context(1)
any(CompositeNasal) $UTilde > beep context(1)
any(CompositeDrsis)  any(Utone) > beep context(1)
any(CompositeCirc)   any(Utone) > beep context(1)
any(CompositeMacron) any(Utone) > beep context(1)
any(CompositeCaron)  any(Utone) > beep context(1)
any(Umodifier) any(Umodifier) $UTilde > $UTilde context(1) context(2)
any(Umodifier) $UTilde > context(2) context(1)

group(NFC)
any(LatinVowel) $UAcute     > index(CompositeAcute,1)
any(LatinVowel) $UGrave     > index(CompositeGrave,1)
any(LatinVowel) $UDrsis     > index(CompositeDrsis,1)
any(LatinVowel) $UTilde     > index(CompositeNasal,1)
any(LatinVowel) $UCirc      > index(CompositeCirc,1)
any(LatinVowel) $UMacron    > index(CompositeMacron,1)
any(LatinVowel) $UCaron     > index(CompositeCaron,1)
any(LatinVowel) $UDotUnder  > index(CompositeDotUnder,1)
