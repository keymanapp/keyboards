c sil_moore generated from template at 2020-09-10 14:46:23
c with name "Mooré - Burkina Faso"
c 
c Mooré keyboard for Burkina Faso
store(&VERSION) '10.0'
store(&NAME) 'Mooré - Burkina Faso'
store(&COPYRIGHT) '© 2006-2020 SIL International'
store(&KEYBOARDVERSION) '2.0'
store(&TARGETS) 'windows macosx linux'
store(&MESSAGE) 'With thanks to Emmanuel Sawadogo for linguistic expert advice'
store(&BITMAP) 'sil_moore.ico'

store(&SHIFTFREESCAPS) '1'
c store(&CAPSONONLY) '1'
store(&VISUALKEYBOARD) 'sil_moore.kvks'

begin Unicode > use(main)

group(main) using keys

c Details from proposed keyboard map

store(keys_0u) [NCAPS K_1] [NCAPS K_2] [NCAPS K_3] [NCAPS K_4] [NCAPS K_5] [NCAPS K_6] [NCAPS K_7] [NCAPS K_8] [NCAPS K_9] [NCAPS K_0] [NCAPS K_HYPHEN] [NCAPS K_EQUAL]
store(outs_0u) '&ẽ"' "'" '(-ɛ_çà)='

store(keys_0s) [NCAPS SHIFT K_1] [NCAPS SHIFT K_2] [NCAPS SHIFT K_3] [NCAPS SHIFT K_4] [NCAPS SHIFT K_5] [NCAPS SHIFT K_6] [NCAPS SHIFT K_7] [NCAPS SHIFT K_8] [NCAPS SHIFT K_9] [NCAPS SHIFT K_0] [NCAPS SHIFT K_HYPHEN] [NCAPS SHIFT K_EQUAL] [CAPS K_1] [CAPS K_2] [CAPS K_3] [CAPS K_4] [CAPS K_5] [CAPS K_6] [CAPS K_7] [CAPS K_8] [CAPS K_9] [CAPS K_0] [CAPS K_HYPHEN] [CAPS K_EQUAL]
store(outs_0s) '1234567890°+' '1234567890°+'

store(keys_1u) 'qwertyuiop' [NCAPS K_LBRKT] [NCAPS K_RBRKT]
store(outs_1u) 'azertyuiopĩ$'

store(keys_1s) 'QWERTYUIOP' [NCAPS SHIFT K_LBRKT] [NCAPS SHIFT K_RBRKT][CAPS K_LBRKT] [CAPS K_RBRKT]
store(outs_1s) 'AZERTYUIOP' dk(diaeresis) '£'   dk(diaeresis)  '£'

store(keys_2u) "asdfghjkl" [NCAPS K_COLON] [NCAPS K_QUOTE] [NCAPS K_BKSLASH]
store(outs_2u) "ãsdfghõklmũ*"

store(keys_2s) 'A'      'SDFGH' 'J'      'KL' [NCAPS SHIFT K_COLON] [NCAPS SHIFT K_QUOTE] [NCAPS SHIFT K_BKSLASH] [CAPS K_COLON] [CAPS K_QUOTE] [CAPS K_BKSLASH]
store(outs_2s) dk(none) 'SDFGH' dk(none) 'KLM%µ'  'M%µ'

store(keys_3u) [K_oE2] 'zxcvbnm' [NCAPS K_COMMA] [NCAPS K_PERIOD] [NCAPS K_SLASH]
store(outs_3u) '<'     'wɩʋvbn,;:!'

store(keys_3s) [SHIFT K_oE2] 'Z' 'X'      'C'      'VBNM' [NCAPS SHIFT K_COMMA] [NCAPS SHIFT K_PERIOD] [NCAPS SHIFT K_SLASH] [CAPS K_COMMA] [CAPS K_PERIOD] [CAPS K_SLASH]
store(outs_3s) '>'           'W' dk(none) dk(none) 'VBN?./§' './§'

store(keys_0a) [NCAPS RALT K_2] [NCAPS RALT K_3] [NCAPS RALT K_4] [NCAPS RALT K_5] [NCAPS RALT K_6] [NCAPS RALT K_7] [NCAPS RALT K_8] [NCAPS RALT K_9] [NCAPS RALT K_0] [NCAPS RALT K_HYPHEN] [NCAPS RALT K_EQUAL]
store(outs_0a) dk(tilde)  '#'        '{'        '['        '|'        dk(grave)  '\'        '^'        '@'        ']'             '}'

store(keys_1a) [NCAPS RALT K_E] [NCAPS RALT K_LBRKT] [NCAPS RALT K_RBRKT]
store(outs_1a) '€'        dk(circumflex) '¤'
              

+ any(keys_0u) > index(outs_0u,1)
+ any(keys_0s) > index(outs_0s,1)
+ any(keys_0a) > index(outs_0a,1)
+ any(keys_1u) > index(outs_1u,1)
+ any(keys_1s) > index(outs_1s,1)
+ any(keys_1a) > index(outs_1a,1)
+ any(keys_2u) > index(outs_2u,1)
+ any(keys_2s) > index(outs_2s,1)
c + any(keys_2a) > use(dkouts) index(outs_2a,1)
+ any(keys_3u) > index(outs_3u,1)
+ any(keys_3s) > index(outs_3s,1)
c + any(keys_3a) > use(dkouts) index(outs_3a,1)

c Additional items in requirements but not on keyboard map - our suggestions

+ [RALT SHIFT K_2] > '²'  c moved from backquote in original proposal - backquote used for tones
+ [RALT CAPS K_2] > '²'  c moved from backquote in original proposal - backquote used for tones
+ [RALT NCAPS K_O] > 'ɔ'
+ [RALT SHIFT K_4] > "ʼ"
+ [RALT CAPS K_4] > "ʼ"
+ [RALT SHIFT K_7] > 'é'
+ [RALT CAPS K_7] > 'é'

c Tone marks - rotate tone marks if necessary
                                 
store(keys_tone) [K_BKQUOTE] [SHIFT K_BKQUOTE] [RALT K_BKQUOTE]
store(outs_tone) U+0300      U+0301            U+0304 
store(toneablechar) 'aãeẽɛiĩɩoõɔuũdgn'

any(toneablechar) any(outs_tone) + any(keys_tone) > context(1) index(outs_tone, 3)
any(toneablechar) + any(keys_tone) > context index(outs_tone, 2)
+ any(keys_tone) > beep

c Characters for linguists
                
store(keys_ling) [NCAPS RALT K_G] [NCAPS RALT K_M] [NCAPS RALT K_D] [RALT SHIFT K_D] [RALT CAPS K_D] [NCAPS RALT K_H] [NCAPS RALT K_J] [RALT SHIFT K_G] [RALT CAPS K_G] [RALT K_N] [RALT SHIFT K_N] [RALT CAPS K_N] 
store(outs_ling) 'ŋʔɖɗɗɦɟɠɠɲɳɳ'

+ any(keys_ling) > index(outs_ling, 1)

c Handle deadkeys

store(deadkeys)  dk(diaeresis) dk(diaeresis)   dk(tilde)  dk(grave)  dk(circumflex)
store(deadchars) '¨'             '¨'              '~'        '`'        '^'
store(keys_dead) [SHIFT K_LBRKT] [CAPS K_LBRKT] [NCAPS RALT K_2] [NCAPS RALT K_7] [NCAPS RALT K_LBRKT]

store(vowel)      'qeiouQEIOU' 
store(diavowel)   'äëïöüÄËÏÖÜ'
store(tildevowel) 'ãẽĩõũÃẼĨÕŨ'
store(circumvowel) 'âêîôûÂÊÎÔÛ'
store(gravevowel) 'àèìòùÀÈÌÒÙ'

dk(diaeresis) + any(vowel) > index(diavowel, 2)
dk(tilde) + any(vowel) > index(tildevowel, 2)
dk(tilde) + 'n' > 'ñ'
dk(tilde) + 'N' > 'Ñ'
dk(grave) + any(vowel) > index(gravevowel, 2)
dk(circumflex) + any(vowel) > index(circumvowel, 2)

any(deadkeys) + any(keys_dead) > index(deadchars, 1) index(deadchars, 2)
any(deadkeys) + ' ' > index(deadchars, 1)

