store(&VERSION) '10.0'
store(&BITMAP) 'sil_mali_qwerty.ico'
store(&COPYRIGHT) '© 2004-2020 SIL International'
store(&NAME) 'Clavier du Mali (Qwerty)'
store(&TARGETS) 'any'
store(&VISUALKEYBOARD) 'sil_mali_qwerty.kvks'
store(&KEYBOARDVERSION) '4.0.1'
store(&LAYOUTFILE) 'sil_mali_qwerty.keyman-touch-layout'

begin Unicode > use(Main)

c The basic keyboard was done by Doug Higby for Burkina Faso + Tones over nasals
c This was modified by Dan Brubaker in January 2008, Oct 2017 and Feb 2020
c All characters are composed as much as practical i.e. one single character  instead of two.
c All composed sequences were added by Dan Brubaker in November 2007
c The following 2 stores are used with the group(angleit) near the bottom of this table

store(lessthan) [K_oE2] "<"
store(greaterthan) [SHIFT K_oE2] ">"

c Note that the modifying keys FOLLOW the character, just as when one writes.
store(AcuteK)   '/'   c acute forward slash 
store(GraveK)   '\'   c grave (below the | on the same key)
store(CircK)    '^'   c circumflex ^
store(DrsisK)   '%'   c 2 dots percent 
store(MacronK)  '='   c Mid line equals 
store(TildeK)   '#'   c Tilde "#"
store(CaronK)   '&'   c Unpside down circumflex ampersand  
store(DotUnderK) '$'  c Dot under
store(LineUnderK) '@' c Horizontal Line under
store(VerticalLineUnderK) '+' c Vertical Line under

store(toneK)    $AcuteK $GraveK $CircK $DrsisK $MacronK $CaronK \
                $DotUnderK $LineUnderK $VerticalLineUnderK               
store(modifierK) outs(toneK) $TildeK                

store(specchar1K) "ABCDEFGHIJKMNOPRUWYZabcdefghijkmnoprsuwyz?[]{}VvLlQqSTt\;Xx~<>`" "'"

c Use the 2 lines below the stores to select matching lc and UC schwas
store(CapSchwa) U+018E c Backwards E
store(LCSchwa)  U+01DD
c store(CapSchwa) U+018F c  "ǝ" that goes with the "Ə" below
c store(LCSchwa)  U+0259  c "Ə"

c French spelling and grammar checkers don't recognize valid decomposed characters.
c Composed characters will center and raise the diacritics better in all Unicode fonts,
c thus making the character "look" correct over a much greater range of Unicode fonts.
 
store(LatinVowel)      "AEIOUaeiou"
store(CompositeAcute)  "Á" "É" U+00CD U+00D3 U+00DA "á" U+00E9 U+00ED U+00F3 U+00FA 
store(CompositeGrave)  "À" "È" U+00CC U+00D2 U+00D9 "à" U+00E8 U+00EC U+00F2 U+00F9 
store(CompositeCirc)   "Â" "Ê" U+00CE U+00D4 U+00DB "â" U+00EA U+00EE U+00F4 U+00FB
store(CompositeNasal)  "Ã" "Ẽ" U+0128 U+00D5 U+0168 "ã" U+1EBD U+0129 U+00F5 U+0169
store(CompositeDrsis)  "Ä" "Ë" U+00CF U+00D6 U+00DC "ä" U+00EB U+00EF U+00F6 U+00FC 
store(CompositeMacron) "Ā" "Ē" "Ī" "Ō" "Ū" "ā" "ē" "ī" "ō" "ū" 
store(CompositeCaron)  "Ǎ" "Ě" "Ǐ" "Ǒ" "Ǔ" "ǎ" "ě" "ǐ" "ǒ" "ǔ" 
store(CompositeDotUnder) "Ạ" "Ẹ" "Ị" "Ọ" "Ụ" U+1EA1 U+1EB9 U+1ECB U+1ECD U+1EE5

c Here are what the numbers BELOW mean in order:
c A           E   backwards E    CAP ESH     I         CAP IOTA
c O          open O         U       open U         N         cap ENG
c ENYA      M               a             e        lc schwa    esh
c i             iota              o         open o        u           open u
c n           eng          enya         m              S               s
c Z             z               w           t               h              d
c This is ALL vowels and nasals including the non a-z ones plus s,S. w and z,Z (h,d,x,t)
store(Umodifiable)  U+0041 U+0045 U+018E U+0190 U+0049 U+0196 \
                    U+004F U+0186 U+0055 U+01B2 U+004E U+014A \
                    U+019D U+004D U+0061 U+0065 U+01DD U+025B \
                    U+0069 U+0269 U+006F U+0254 U+0075 U+028B \
                    U+006E U+014B U+0272 U+006D U+0053 U+0073 \
                    U+005A U+007A U+0077 U+0074 U+0068 U+0064 \
                    U+0078 U+0067 U+006C U+0044 U+0048 U+004C \
                    U+0054 U+0251 U+0268 U+0153 U+00E6 "T" c Note d, g, h, l, s, t, x needed for Arabic letters
store(Composite) outs(CompositeAcute)  outs(CompositeGrave) \
                 outs(CompositeCirc)   outs(CompositeDrsis) \
                 outs(CompositeMacron) outs(CompositeCaron) outs(CompositeDotUnder) 

c Added quite a few character to below
c E back    B hook   E           C cidille     D hook     Euro sign
c GAMMA    glottal    Iota        ENYA       K hook     check mark
c ENG        O open Rt AmDQ  R hook     U open       W hook
c Y hook     ZED      schwa     b hook     c cidille      d hook
c e open        oe      gamma    ss sign      iota          enya
c k hook  copyright    eng        o open    Lf AmDQ     r hook
c ;        u open      w hook    y hook       zed          OE
c enya       eng        ENYA      ENG      DBL cross    cross
c EngPound  a alpha   Lf AmSQ Rt AmSQ     esh          glottal
c db arrow    \      Apostrophy  i barred       g alpha        tilda
c Lf wedge Rt wedge Lf Acc   Straight Acc
store(Uspecchar1)   $CapSchwa U+0181 U+00C7 U+018A U+0190 U+20AC \
                    U+0194 U+0268 U+0196 U+019D U+2026 U+2713 \
                    U+014A U+0186 U+201D U+00D8 U+01B2 U+00A7  \
                    U+01B3 U+01B7 $LCSchwa U+0253 U+00E7 U+0257 \
                    U+025B U+0153 U+0263 U+0294 U+0269 U+0272 \
                    U+00040 U+00A9 U+014B U+0254 U+201C U+2116 \
                    ";" U+028B U+00B0 U+01B4 U+0292 U+0268 \
                    "[" "]" "{" "}" U+2021 U+2020 \
                    U+00A3 U+02BC U+2019 U+2018 U+0283 U+00E6 \
                    U+21D2 "\" ";" U+0251 U+0261 U+007E \
                    U+003C U+003E U+0060 "'"
                                       
c The stores below are for the Decomposed characters, for some are not composed in Unicode.
store(UGrave)     U+0300
store(UAcute)     U+0301
store(UCirc)      U+0302 
store(UDrsis)     U+0308
store(UMacron)    U+0304
store(UTilde)     U+0303
store(UCaron)     U+030C
store(UDotUnder)  U+0323
store(ULineUnder) U+0320
store(UVerticalLineUnder) U+0329

store(Utone)     $UAcute $UGrave $UCirc $UDrsis $UMacron $UCaron \
                 $UDotUnder $ULineUnder $UVerticalLineUnder
store(Umodifier) outs(Utone) $UTilde

group(Main) using keys

c comma before everything
"," + any(specchar1K) > index(Uspecchar1,2)

any(Umodifiable) + any(modifierK) > context index(Umodifier,2) use(Udiacritics) use(NFC)

c Deletion rules
any(CompositeAcute) + [K_BKSP] > index(LatinVowel,1)
any(CompositeGrave) + [K_BKSP] > index(LatinVowel,1)
any(CompositeDrsis) + [K_BKSP] > index(LatinVowel,1)
any(CompositeCirc) + [K_BKSP] > index(LatinVowel,1)
any(CompositeNasal) + [K_BKSP] > index(LatinVowel,1)

c When adding a second modifier over the TILDA, we need to check the order.

any(Composite) + $TildeK > context $UTilde use(fixtilde)
any(CompositeNasal) + any(toneK) > context index(Utone,2) use(NFC)
any(CompositeNasal) any(Utone) + $TildeK > beep context
c any(dotunderK) + $DotBK > context(1) $UDotB

any(Umodifier) + any(modifierK) > context index(Umodifier,2) use(Udiacritics) use(NFC)

c below 2 hyphens goes to Em-dash AND the Apostrophy after jusqu` doesn't go over the u anymore
"-" + "-" > U+2014
"qu" + "`" > "qu’"
"Qu" + "`" > "Qu’"
"rd" + "`"  > "rd’" c aujourd'hui d'autres d'onyx d'eau
 
+ "[" > "ɲ" 
+ "{" > "Ɲ"
+ "]" > "ŋ"
+ "}" > "Ŋ"
+ ";" > "ɛ"
+ "'" > "ɔ"
+ "`" > U+2019
+ "~" > ";"        

c Extra characters with combined accents
"V" + "%" > "Ə" c Capital Schwa variant
"v" + "%" > U+0259 c lc Schwa variant
"B" + "%" > U+0102 c Capital A with breve accent
"b" + "%" > "ɑ̆" c small alpha a with breve accent
"M" + "/" > "Ḿ" c acute m
"m" + "/" > "ḿ" c acute
"N" + "/" > "Ń" c acute n
"n" + "/" > "ń" c acute
"N" + "#" > "Ñ" c tilde
"n" + "#" > "ñ" c tilde
"N" + "&" > "Ň" c caron
"n" + "&" > "ň" c caron
"S" + "&" > "Š" c caron s
"s" + "&" > "š" c caron
"Z" + "&" > "Ž" c caron z
"z" + "&" > "ž" c caron
"w" + "\" > "ẁ" c grave w
"Ə" + "%" > "Ӛ" c 2 dots schwa
"ə" + "%" > "ӛ" c 2 dots
"m" + "$" > U+1E43 c DotUnder
"n" + "$" > U+1E47 c DotUnder
"d" + "$" > U+1E0D c DotUnder
"h" + "$" > U+1E25 c DotUnder
"s" + "$" > U+1E63 c DotUnder
"t" + "$" > U+1E6D c DotUnder
"l" + "$" > U+1E37 c DotUnder                                 
"t" + "@" > U+1E6F c LineUnder
"l" + "@" > U+1E3B c LineUnder
"h" + "@" > U+1E96 c LineUnder
"d" + "@" > U+1E0F c LineUnder
"n" + "@" > U+1E49 c LineUnder
                       
c Fractions
"!1" + "2" > "½"
"!1" + "4" > "¼"
"!3" + "4" > "¾"
"!1" + "3" > "⅓"
"!2" + "3" > "⅔"
"!1" + "5" > "⅕"
"!2" + "5" > "⅖"
"!3" + "5" > "⅗"
"!4" + "5" > "⅘"
"!1" + "6" > "⅙"
"!5" + "6" > "⅚"
"!1" + "8" > "⅛"
"!3" + "8" > "⅜"
"!5" + "8" > "⅝"
"!7" + "8" > "⅞"

"!" + "a" > U+0040 c arobase for Emails AT sign
"!" + "b" > U+00AE c R circle sign = Registered Sign
"!" + "c" > U+2126 c Ohm sign
"!" + "d" > U+2260 c Not Equal to
"!" + "e" > U+00B1 c Plus/Minus sign
"!" + "f" > U+00D8 c NULL sign big
"!" + "g" > U+00F7 c Division sign  
"!" + "h" > U+221E c Infinity sign
"!" + "i" > U+2264 c Less-Than or Equal to  
"!" + "k" > U+2026 c 3 dots = ellipsis
"!" + "j" > U+2265 c Greater-Than or Equal to
"!" + "l" > U+00F8 c Small letter o with stroke
"!" + "m" > U+00B5 c micro sign
"!" + "n" > U+02A7 c T-Esh ligature
"!" + "o" > U+02A4 c D-Ezh ligature
"!" + "p" > U+03BB c lamda
"!" + "q" > U+003C c Left wedge
"!" + "Q" > U+003E c Right wedge
"!" + "r" > U+0280 c Small CAP R for French r sound
"!" + "s" > U+2713 c Check mark DUPICATE
"!" + "t" > U+0265 c Upside down h equals a rounded u
"!" + "u" > U+1D7E c barred u
"!" + "v" > U+0244 c barred CAP U
"!" + "w" > U+1D7C c barred iota
"!" + "x" > U+03C7 c Chi  fancy X lower case Greek
"!" + "y" > "@yahoo.com"
"!" + "z" > "@wycliffe.org"

"!1" + " " > U+00B9 c 1 superscript
"!2" + " " > U+00B2 c 2 superscript
"!3" + " " > U+00B3 c 3 superscript
"!4" + " " > U+2074 c 4 superscript
"!5" + " " > U+2075 c 5 superscript
"!6" + " " > U+2076 c 6 superscript
"!7" + " " > U+2077 c 7 superscript
"!8" + " " > U+2078 c 8 superscript
"!9" + " " > U+2079 c 9 superscript
"!0" + " " > U+2070 c 0 superscript
"kp" + "p" > "k͡p" c Top Tie Bar  U+0361 for kp
"gb" + "b" > "g͡b" c Top Tie Bar  U+0361 for gb
"ŋm" + "m" > "ŋ͡m" c Top Tie Bar  U+0361 for ŋm
"kk" + "s" > U+00A0 c No-Break Space
"kk" + "h" > U+2011 c Non-Breaking Hyphen
  
$keymanweb: + any(lessthan) > U+2039 use(angleit)
$keymanweb: + any(greaterthan) > U+203A use(angleit)
$keymanonly: + "<" > U+2039 use(angleit)
$keymanonly: + ">" > U+203A use(angleit)

platform('touch') + [T_00AB_2039] > U+00AB U+2039
platform('touch') + [T_203A_00BB] > U+203A U+00BB

group(angleit)
U+2039 U+2039 > U+00AB
U+00AB U+2039 > context(1) U+00A0 context(2)
U+203A U+203A > U+00BB
U+00BB U+203A > context(2) U+00A0 context(1)
c The above ueses a big (regular) No-Break Space U+00A0 between the quotes,
c To get a Narrow No-Break Space between the two guillemets, use U+202F instead

group(fixtilde)
any(CompositeAcute)  $UTilde > index(CompositeNasal,1) $UAcute use(NFC)
any(CompositeGrave)  $UTilde > index(CompositeNasal,1) $UGrave
any(CompositeDrsis)  $UTilde > index(CompositeNasal,1) $UDrsis use(NFC) 
any(CompositeCirc)   $UTilde > index(CompositeNasal,1) $UCirc   
any(CompositeMacron) $UTilde > index(CompositeNasal,1) $UMacron use(NFC) 
any(CompositeCaron)  $UTilde > index(CompositeNasal,1) $UCaron 
any(CompositeNasal)  $UTilde any(Utone) > context(1) context(3)

c Two groups of Constraints: Udiacritics and NFC
group(Udiacritics)
any(Utone) any(Utone) > beep context(1)
any(CompositeAcute)  any(Utone) > beep context(1)
any(CompositeGrave)  any(Utone) > beep context(1)
any(CompositeNasal) $UTilde > beep context(1)
any(CompositeDrsis)  any(Utone) > beep context(1)
any(CompositeCirc)   any(Utone) > beep context(1)
any(CompositeMacron) any(Utone) > beep context(1)
any(CompositeCaron)  any(Utone) > beep context(1)
any(Umodifier) any(Umodifier) $UTilde > $UTilde context(1) context(2)
any(Umodifier) $UTilde > context(2) context(1)
U+0303 any(Utone) U+0303 > beep context(1) context(2)

group(NFC)

any(LatinVowel) $UAcute     > index(CompositeAcute,1)
any(LatinVowel) $UGrave     > index(CompositeGrave,1)
any(LatinVowel) $UDrsis     > index(CompositeDrsis,1)
any(LatinVowel) $UTilde     > index(CompositeNasal,1)
any(LatinVowel) $UCirc      > index(CompositeCirc,1)
any(LatinVowel) $UMacron    > index(CompositeMacron,1)
any(LatinVowel) $UCaron     > index(CompositeCaron,1)
any(LatinVowel) $UDotUnder  > index(CompositeDotUnder,1)

c End of Keyboard
