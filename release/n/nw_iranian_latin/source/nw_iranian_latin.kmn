store(&VERSION) '9.0'
store(&TARGETS) 'any'
store(&NAME) 'NW Iranian Latin'
store(&BITMAP) 'nw_iranian_latin.ico'
store(&VISUALKEYBOARD) 'nw_iranian_latin.kvks'
store(&LAYOUTFILE) 'nw_iranian_latin.keyman-touch-layout'
store(&COPYRIGHT) '© 2017-2020 SIL International'
store(&MESSAGE) 'The NW Iranian keyboard is distributed under The MIT License (MIT).'
store(&KMW_HELPTEXT) 'This is a Latin keyboard for transcription of NW Iranian languages.'
store(&KEYBOARDVERSION) '1.0.4'
store(&ETHNOLOGUECODE) 'glk'

group(main) using keys

platform('desktop') + [SHIFT K_QUOTE] > dk(0022)
platform('desktop') + [SHIFT K_COLON] > dk(003a)
platform('desktop') + [SHIFT K_6] > dk(005e)
platform('desktop') + [K_QUOTE] > dk(0027)
platform('desktop') + [K_COLON] > dk(003b)
platform('desktop') + [K_BKQUOTE] > dk(0060) 
platform('desktop') + [K_SLASH] > dk(002f)
platform('desktop') + [K_BKSLASH] > dk(005c)

match > use(deadkeys)

begin Unicode > use(main)

+ [K_SPACE] > ' '
+ [K_SLASH] > '/'
+ [SHIFT K_SLASH] > '?'
+ [K_PERIOD] > '.'
+ [K_COMMA] > ','
+ [K_M] > 'm'
+ [SHIFT K_M] > 'M'
+ [K_N] > 'n'
+ [SHIFT K_N] > 'N'
+ [K_B] > 'b'
+ [SHIFT K_B] > 'B'
+ [K_V] > 'v'
+ [SHIFT K_V] > 'V'
+ [K_C] > 'c'
+ [SHIFT K_C] > 'C'
+ [K_X] > 'x'
+ [SHIFT K_X] > 'X'
+ [K_Z] > 'z'
+ [SHIFT K_Z] > 'Z'
+ [K_L] > 'l'
+ [SHIFT K_L] > 'L'
+ [K_K] > 'k'
+ [SHIFT K_K] > 'K'
+ [K_J] > 'j'
+ [SHIFT K_J] > 'J'
+ [K_H] > 'h'
+ [SHIFT K_H] > 'H'
+ [K_G] > 'g'
+ [SHIFT K_G] > 'G'
+ [K_F] > 'f'
+ [SHIFT K_F] > 'F'
+ [K_D] > 'd'
+ [SHIFT K_D] > 'D'
+ [K_S] > 's'
+ [SHIFT K_S] > 'S'
+ [K_A] > 'a'
+ [SHIFT K_A] > 'A'
+ [K_BKSLASH] > '\'
+ [K_RBRKT] > ']'
+ [K_LBRKT] > '['
+ [K_P] > 'p'
+ [SHIFT K_P] > 'P'
+ [K_O] > 'o'
+ [SHIFT K_O] > 'O'
+ [K_I] > 'i'
+ [SHIFT K_I] > 'I'
+ [K_U] > 'u'
+ [SHIFT K_U] > 'U'
+ [K_Y] > 'y'
+ [SHIFT K_Y] > 'Y'
+ [K_T] > 't'
+ [SHIFT K_T] > 'T'
+ [K_R] > 'r'
+ [SHIFT K_R] > 'R'
+ [K_E] > 'e'
+ [SHIFT K_E] > 'E'
+ [K_W] > 'w'
+ [SHIFT K_W] > 'W'
+ [K_Q] > 'q'
+ [SHIFT K_Q] > 'Q'
+ [K_EQUAL] > '='
+ [K_HYPHEN] > '-'
+ [SHIFT K_HYPHEN] > '_'
+ [K_0] > '0'
+ [K_9] > '9'
+ [K_8] > '8'
+ [K_7] > '7'
+ [K_6] > '6'
+ [K_5] > '5'
+ [K_4] > '4'
+ [K_3] > '3'
+ [K_2] > '2'
+ [K_1] > '1' 

group(deadkeys) 
c Deadkeys ... (deadkey + space always = deadkey)

c with double-quote
store(dkf0022) U+0020 U+0065 U+0045
store(dkt0022) U+0022 U+025b U+0190
dk(0022) any(dkf0022) > index(dkt0022, 2)

c with colon
store(dkf003a) U+0020 U+0041 U+0061 U+0044 U+0064 U+0049 U+0069 U+004f U+006f U+0055 U+0075
store(dkt003a) U+003a U+00c4 U+00e4 U+0110 U+0111 U+00cf U+00ef U+00d6 U+00f6 U+00dc U+00fc
dk(003a) any(dkf003a) > index(dkt003a, 2)

c with circumflex
store(dkf005e) U+0020 U+0041 U+0061
store(dkt005e) U+005e U+00c2 U+00e2
dk(005e) any(dkf005e) > index(dkt005e, 2)

c with apostrophe
store(dkf0027) U+0020 U+0041 U+0061 U+0045 U+0065 U+003f
store(dkt0027) U+0027 U+00c6 U+00e6 U+018f U+0259 U+0295
dk(0027) any(dkf0027) > index(dkt0027, 2)

c with semi-colon
store(dkf003b) U+0020 U+002d U+005f U+003c U+003e U+0041 U+0061 U+0043 U+0063 U+0044 U+0064 U+0045 U+0065 U+0047 U+0067 U+0048 U+0068 U+0049 U+0069 U+006a U+006c U+004f U+006f U+0052 U+0072 U+0053 U+0073 U+0054 U+0074 U+0055 U+0075 U+005a U+007a U+003f U+0030
store(dkt003b) U+003b U+0304 U+0331 U+00ab U+00bb U+0100 U+0101 U+010c U+010d U+1e0c U+1e0d U+0112 U+0113 U+01e6 U+01e7 U+0126 U+0127 U+012a U+012b U+01f0 U+026b U+014c U+014d U+0158 U+0159 U+0160 U+0161 U+1e6c U+1e6d U+016a U+016b U+017d U+017e U+0294 U+2205
dk(003b) any(dkf003b) > index(dkt003b, 2)

c with backquote (grave accent)
store(dkf0060) U+0020 U+0030 U+0031 U+0032 U+0033 U+0034 U+0035 U+0036 U+0037 U+0038 U+0039 U+0041 U+0061 U+0047 U+0067
store(dkt0060) U+0060 U+06f0 U+06f1 U+06f2 U+06f3 U+06f4 U+06f5 U+06f6 U+06f7 U+06f8 U+06f9 U+00c5 U+00e5 U+0194 U+0263
dk(0060) any(dkf0060) > index(dkt0060, 2)

c with slash
store(dkf002f) U+0020 U+0041 U+0061 U+0045 U+0065 U+0049 U+0069 U+004f U+006f U+0055 U+0075 
store(dkt002f) U+002f U+00c1 U+00e1 U+00c9 U+00e9 U+00cd U+00ed U+00d3 U+00f3 U+00da U+00fa
dk(002f) any(dkf002f) > index(dkt002f, 2)

c with backslash
store(dkf005c) U+0020 U+0041 U+0061 U+0045 U+0065 U+0049 U+0069 U+004f U+006f U+0055 U+0075 
store(dkt005c) U+005c U+00c0 U+00e0 U+00c8 U+00e8 U+00cc U+00ec U+00d2 U+00f2 U+00d9 U+00f9 
dk(005c) any(dkf005c) > index(dkt005c, 2)
