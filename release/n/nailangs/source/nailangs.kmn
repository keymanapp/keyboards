store(&VERSION) '10.0'
store(&NAME) 'Nailangs'
store(&TARGETS) 'any'
store(&COPYRIGHT) '© 2015-2019 Ade Oseni'
store(&KEYBOARDVERSION) '1.3'
store(&VISUALKEYBOARD) 'nailangs.kvks'
store(&LAYOUTFILE) 'nailangs.keyman-touch-layout'
store(&KMW_EMBEDCSS) 'nailangs.css'
store(&BITMAP) 'nailangs.ico'

begin Unicode > use(main)

store(vowel) 'aeiouAEIOUẹịọụẸỊỌỤǝƎ'
store(mn) 'mnMN'
store(nn) 'nN'     

store(letterdflt)[K_A] [K_B] [K_C] [K_D] [K_E] [K_F] [K_G] \
              [K_H] [K_I] [K_J] [K_K] [K_L] [K_M] [K_N] \
              [K_O] [K_P] [K_Q] [K_R] [K_S] [K_T] [K_U] \
              [K_V] [K_W] [K_X] [K_Y] [K_Z]      
store(lettercaps) [CAPS K_A] [CAPS K_B] [CAPS K_C] [CAPS K_D] [CAPS K_E] [CAPS K_F] [CAPS K_G] \
              [CAPS K_H] [CAPS K_I] [CAPS K_J] [CAPS K_K] [CAPS K_L] [CAPS K_M] [CAPS K_N] \
              [CAPS K_O] [CAPS K_P] [CAPS K_Q] [CAPS K_R] [CAPS K_S] [CAPS K_T] [CAPS K_U] \
              [CAPS K_V] [CAPS K_W] [CAPS K_X] [CAPS K_Y] [CAPS K_Z]      
store(letterncaps) [NCAPS K_A] [NCAPS K_B] [NCAPS K_C] [NCAPS K_D] [NCAPS K_E] [NCAPS K_F] [NCAPS K_G] \
              [NCAPS K_H] [NCAPS K_I] [NCAPS K_J] [NCAPS K_K] [NCAPS K_L] [NCAPS K_M] [NCAPS K_N] \
              [NCAPS K_O] [NCAPS K_P] [NCAPS K_Q] [NCAPS K_R] [NCAPS K_S] [NCAPS K_T] [NCAPS K_U] \
              [NCAPS K_V] [NCAPS K_W] [NCAPS K_X] [NCAPS K_Y] [NCAPS K_Z]      
              
store(lettershift)[SHIFT K_A] [SHIFT K_B] [SHIFT K_C] [SHIFT K_D] [SHIFT K_E] [SHIFT K_F] [SHIFT K_G] \
              [SHIFT K_H] [SHIFT K_I] [SHIFT K_J] [SHIFT K_K] [SHIFT K_L] [SHIFT K_M] [SHIFT K_N] \
              [SHIFT K_O] [SHIFT K_P] [SHIFT K_Q] [SHIFT K_R] [SHIFT K_S] [SHIFT K_T] [SHIFT K_U] \
              [SHIFT K_V] [SHIFT K_W] [SHIFT K_X] [SHIFT K_Y] [SHIFT K_Z]      
store(lettershiftcaps) [CAPS SHIFT K_A] [CAPS SHIFT K_B] [CAPS SHIFT K_C] [CAPS SHIFT K_D] [CAPS SHIFT K_E] [CAPS SHIFT K_F] [CAPS SHIFT K_G] \
              [CAPS SHIFT K_H] [CAPS SHIFT K_I] [CAPS SHIFT K_J] [CAPS SHIFT K_K] [CAPS SHIFT K_L] [CAPS SHIFT K_M] [CAPS SHIFT K_N] \
              [CAPS SHIFT K_O] [CAPS SHIFT K_P] [CAPS SHIFT K_Q] [CAPS SHIFT K_R] [CAPS SHIFT K_S] [CAPS SHIFT K_T] [CAPS SHIFT K_U] \
              [CAPS SHIFT K_V] [CAPS SHIFT K_W] [CAPS SHIFT K_X] [CAPS SHIFT K_Y] [CAPS SHIFT K_Z]      
store(lettershiftncaps) [NCAPS SHIFT K_A] [NCAPS SHIFT K_B] [NCAPS SHIFT K_C] [NCAPS SHIFT K_D] [NCAPS SHIFT K_E] [NCAPS SHIFT K_F] [NCAPS SHIFT K_G] \
              [NCAPS SHIFT K_H] [NCAPS SHIFT K_I] [NCAPS SHIFT K_J] [NCAPS SHIFT K_K] [NCAPS SHIFT K_L] [NCAPS SHIFT K_M] [NCAPS SHIFT K_N] \
              [NCAPS SHIFT K_O] [NCAPS SHIFT K_P] [NCAPS SHIFT K_Q] [NCAPS SHIFT K_R] [NCAPS SHIFT K_S] [NCAPS SHIFT K_T] [NCAPS SHIFT K_U] \
              [NCAPS SHIFT K_V] [NCAPS SHIFT K_W] [NCAPS SHIFT K_X] [NCAPS SHIFT K_Y] [NCAPS SHIFT K_Z]      

store(digitdflt) [K_0] [K_1] [K_2] [K_3] [K_4] [K_5] [K_6] [K_7] [K_8] [K_9]
store(digitcaps) [CAPS K_0] [CAPS K_1] [CAPS K_2] [CAPS K_3] [CAPS K_4] [CAPS K_5] [CAPS K_6] [CAPS K_7] [CAPS K_8] [CAPS K_9]
store(digitncaps) [NCAPS K_0] [NCAPS K_1] [NCAPS K_2] [NCAPS K_3] [NCAPS K_4] [NCAPS K_5] [NCAPS K_6] [NCAPS K_7] [NCAPS K_8] [NCAPS K_9]
store(digitshift) [SHIFT K_0] [SHIFT K_1] [SHIFT K_2] [SHIFT K_3] [SHIFT K_4] [SHIFT K_5] [SHIFT K_6] [SHIFT K_7] [SHIFT K_8] [SHIFT K_9]
store(digitshiftcaps) [CAPS SHIFT K_0] [CAPS SHIFT K_1] [CAPS SHIFT K_2] [CAPS SHIFT K_3] [CAPS SHIFT K_4] [CAPS SHIFT K_5] [CAPS SHIFT K_6] [CAPS SHIFT K_7] [CAPS SHIFT K_8] [CAPS SHIFT K_9]
store(digitshiftncaps) [NCAPS SHIFT K_0] [NCAPS SHIFT K_1] [NCAPS SHIFT K_2] [NCAPS SHIFT K_3] [NCAPS SHIFT K_4] [NCAPS SHIFT K_5] [NCAPS SHIFT K_6] [NCAPS SHIFT K_7] [NCAPS SHIFT K_8] [NCAPS SHIFT K_9]

store(raltn) [CAPS RALT K_N] [NCAPS RALT K_N] [CAPS SHIFT RALT K_N] [NCAPS SHIFT RALT K_N]
store(ctrlaltn) [CAPS CTRL ALT K_N] [NCAPS CTRL ALT K_N] [CAPS SHIFT CTRL ALT K_N] [NCAPS SHIFT CTRL ALT K_N]
store(raltnchar) 'ƝɲɲƝ'

store(extradflt) [K_oE2] [K_LBRKT] [K_EQUAL] [K_HYPHEN] 
store(extracaps) [CAPS K_oE2] [CAPS K_LBRKT] [CAPS K_EQUAL] [CAPS K_HYPHEN] 
store(extrancaps) [NCAPS K_oE2] [NCAPS K_LBRKT] [NCAPS K_EQUAL] [NCAPS K_HYPHEN]
store(extrashift) [SHIFT K_oE2] [SHIFT K_LBRKT] [SHIFT K_EQUAL] [SHIFT K_HYPHEN]

store(extrashiftcaps) [CAPS SHIFT K_oE2] [CAPS SHIFT K_LBRKT] [CAPS SHIFT K_EQUAL] [CAPS SHIFT K_HYPHEN]
store(extrashiftncaps) [NCAPS SHIFT K_oE2] [NCAPS SHIFT K_LBRKT] [NCAPS SHIFT K_EQUAL] [NCAPS SHIFT K_HYPHEN]

store(ralt) [RALT K_BKQUOTE] [RALT K_1] [RALT K_2] [RALT K_3] [RALT K_4] [RALT K_5] [RALT K_6] [RALT K_7] \
    	[RALT K_8] [RALT K_9] [RALT K_0] [RALT K_HYPHEN] [RALT K_EQUAL] [RALT K_Q] [RALT K_oE2] [RALT K_LBRKT] \
    	[RALT K_RBRKT] [RALT K_COLON] [RALT K_QUOTE] [RALT K_BKSLASH] [RALT K_COMMA] [RALT K_PERIOD] [RALT K_SLASH] 
    	   	
store(raltshift) [RALT SHIFT K_BKQUOTE] [RALT SHIFT K_1] [RALT SHIFT K_2] [RALT SHIFT K_3] [RALT SHIFT K_4] [RALT SHIFT K_5] \
    	[RALT SHIFT K_6] [RALT SHIFT K_7] [RALT SHIFT K_8] [RALT SHIFT K_9] [RALT SHIFT K_0] [RALT SHIFT K_HYPHEN] \
    	[RALT SHIFT K_EQUAL] [RALT SHIFT K_LBRKT] [RALT SHIFT K_RBRKT] [RALT SHIFT K_COLON] [RALT SHIFT K_QUOTE] \
    	[RALT SHIFT K_BKSLASH] [RALT SHIFT K_COMMA] [RALT SHIFT K_PERIOD] [RALT SHIFT K_SLASH]  
  
store(ctlalt) [CTRL ALT K_BKQUOTE] [CTRL ALT K_1] [CTRL ALT K_2] [CTRL ALT K_3] [CTRL ALT K_4] [CTRL ALT K_5] [CTRL ALT K_6] [CTRL ALT K_7] \
    	[CTRL ALT K_8] [CTRL ALT K_9] [CTRL ALT K_0] [CTRL ALT K_HYPHEN] [CTRL ALT K_EQUAL] [CTRL ALT K_Q] [CTRL ALT K_oE2] [CTRL ALT K_LBRKT] \
    	[CTRL ALT K_RBRKT] [CTRL ALT K_COLON] [CTRL ALT K_QUOTE] [CTRL ALT K_BKSLASH] [CTRL ALT K_COMMA] [CTRL ALT K_PERIOD] [CTRL ALT K_SLASH] 
              
store(ctlaltshift) [CTRL ALT SHIFT K_BKQUOTE] [CTRL ALT SHIFT K_1] [CTRL ALT SHIFT K_2] [CTRL ALT SHIFT K_3] [CTRL ALT SHIFT K_4] [CTRL ALT SHIFT K_5] \
    	[CTRL ALT SHIFT K_6] [CTRL ALT SHIFT K_7] [CTRL ALT SHIFT K_8] [CTRL ALT SHIFT K_9] [CTRL ALT SHIFT K_0] [CTRL ALT SHIFT K_HYPHEN] \
    	[CTRL ALT SHIFT K_EQUAL] [CTRL ALT SHIFT K_LBRKT] [CTRL ALT SHIFT K_RBRKT] [CTRL ALT SHIFT K_COLON] [CTRL ALT SHIFT K_QUOTE] \
    	[CTRL ALT SHIFT K_BKSLASH] [CTRL ALT SHIFT K_COMMA] [CTRL ALT SHIFT K_PERIOD] [CTRL ALT SHIFT K_SLASH]

store(spacekey) [K_SPACE] [SHIFT K_SPACE] [RALT K_SPACE] [RALT SHIFT K_SPACE] [CTRL ALT K_SPACE] [CTRL ALT SHIFT K_SPACE]

c custom touch-layout keys
store(tkeyLC) [T_SHWA][T_EDOT][T_IDOT][T_ODOT][T_UDOT][T_BHOOK][T_DHOOK][T_KHOOK][T_YHOOK][T_NDOT][T_NLHOOK][T_NRHOOK][T_RBAR][T_SDOT][T_EXCLAM][T_QUESTION]

store(tkeyUC) [SHIFT T_SHWA][SHIFT T_EDOT][SHIFT T_IDOT][SHIFT T_ODOT][SHIFT T_UDOT][SHIFT T_BHOOK][SHIFT T_DHOOK][SHIFT T_KHOOK][SHIFT T_YHOOK] \
    	[SHIFT T_NDOT][SHIFT T_NLHOOK][SHIFT T_NRHOOK][SHIFT T_RBAR][SHIFT T_SDOT][SHIFT T_EXCLAM][SHIFT T_QUESTION]

store(tkey2LC) [T_AGRAVE] [T_AACUTE] [T_ATILDE] [T_AHAT] \ 
    	[T_EGRAVE] [T_EACUTE] [T_ETILDE] [T_EHAT] \
    	[T_EDOTGRAVE] [T_EDOTACUTE] [T_EDOTTILDE] [T_EDOTHAT] \
    	[T_SHWAGRAVE] [T_SHWAACUTE] [T_SHWATILDE] [T_SHWAHAT]\
    	[T_IGRAVE] [T_IACUTE] [T_ITILDE] [T_IHAT] \
    	[T_IDOTGRAVE] [T_IDOTACUTE] [T_IDOTTILDE] [T_IDOTHAT]\
    	[T_OGRAVE] [T_OACUTE] [T_OTILDE] [T_OHAT] \
    	[T_ODOTGRAVE] [T_ODOTACUTE] [T_ODOTTILDE] [T_ODOTHAT] \
    	[T_UGRAVE] [T_UACUTE] [T_UTILDE] [T_UHAT] \
    	[T_UDOTGRAVE] [T_UDOTACUTE] [T_UDOTTILDE] [T_UDOTHAT] \
    	[T_MGRAVE] [T_MACUTE] [T_MTILDE] [T_MHAT] \
    	[T_NGRAVE] [T_NACUTE] [T_NTILDE] [T_NHAT]
    	
store(tkey2UC) [SHIFT T_AGRAVE] [SHIFT T_AACUTE] [SHIFT T_ATILDE] [SHIFT T_AHAT] \ 
    	[SHIFT T_EGRAVE] [SHIFT T_EACUTE] [SHIFT T_ETILDE] [SHIFT T_EHAT] \
    	[SHIFT T_EDOTGRAVE] [SHIFT T_EDOTACUTE] [SHIFT T_EDOTTILDE] [SHIFT T_EDOTHAT] \
    	[SHIFT T_SHWAGRAVE] [SHIFT T_SHWAACUTE] [SHIFT T_SHWATILDE] [SHIFT T_SHWAHAT] \
    	[SHIFT T_IGRAVE] [SHIFT T_IACUTE] [SHIFT T_ITILDE] [SHIFT T_IHAT] \
    	[SHIFT T_IDOTGRAVE] [SHIFT T_IDOTACUTE] [SHIFT T_IDOTTILDE] [SHIFT T_IDOTHAT]\
    	[SHIFT T_OGRAVE] [SHIFT T_OACUTE] [SHIFT T_OTILDE] [SHIFT T_OHAT] \
    	[SHIFT T_ODOTGRAVE] [SHIFT T_ODOTACUTE] [SHIFT T_ODOTTILDE] [SHIFT T_ODOTHAT] \
    	[SHIFT T_UGRAVE] [SHIFT T_UACUTE] [SHIFT T_UTILDE] [SHIFT T_UHAT] \
    	[SHIFT T_UDOTGRAVE] [SHIFT T_UDOTACUTE] [SHIFT T_UDOTTILDE] [SHIFT T_UDOTHAT] \
    	[SHIFT T_MGRAVE] [SHIFT T_MACUTE] [SHIFT T_MTILDE] [SHIFT T_MHAT]\
    	[SHIFT T_NGRAVE] [SHIFT T_NACUTE] [SHIFT T_NTILDE] [SHIFT T_NHAT]


store(tcharLC) 'ǝẹịọụɓɗƙƴṅɲŋɍṣ!?'
store(tcharUC) 'ƎẸỊỌỤƁƊƘƳṄƝŊɌṢ!?'

store(tchar2LCa) 'aaaaeeeeẹẹẹẹǝǝǝǝııııịịịịooooọọọọuuuuụụụụmmmmnnnn'
store(tchar2UCa) 'AAAAEEEEẸẸẸẸƎƎƎƎIIIIỊỊỊỊOOOOỌỌỌỌUUUUỤỤỤỤMMMMNNNN'

store(tchar2b) U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 \
    	U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 U+0302 \
    	U+0300 U+0301 U+0303 U+0302 U+0300 U+0301 U+0303 u+0302
    	
store(keydflt) outs(letterdflt) outs(digitdflt) outs(extradflt)
store(keycaps) outs(lettercaps) outs(digitcaps) outs(extracaps)
store(keyncaps) outs(letterncaps) outs(digitncaps) outs(extrancaps)
store(keyshift) outs(lettershift) outs(digitshift) outs(extrashift)
store(keyshiftcaps) outs(lettershiftcaps) outs(digitshiftcaps) outs(extrashiftcaps)
store(keyshiftncaps) outs(lettershiftncaps) outs(digitshiftncaps) outs(extrashiftncaps)

store(alphalower) 'abcdefghijklmnopqrstuvwxyz'
store(alphaupper) 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'
store(digitlower) 'ẹɓɗǝƙƴịṅọụ'
store(extralower) 'ɲŋɍṣ'
store(digitupper) 'ẸƁƊƎƘƳỊṄỌỤ'
store(extraupper) 'ƝŊɌṢ'
store(nonletterlower) '¦1234567890-+/|[]:@#;' U+0027 '?'
store(nonletterupper) '¬!"£$%^&*()_={}??' U+005C '<>~'

store(charlower) outs(alphalower) outs(digitlower) outs(extralower)
store(charupper) outs(alphaupper) outs(digitupper) outs(extraupper)

group(main) using keys

c punctuation  and currency symbols
+ [K_PERIOD] > '.'
+ [K_COMMA] > ','
+ [K_BKQUOTE] > '₦'
+ [SHIFT K_PERIOD] > '.'
+ [SHIFT K_COMMA] > ','
+ [SHIFT K_BKQUOTE] > '₦'

c keys to add accent marks
+ [K_QUOTE]         > '´' use(addmarks)
+ [K_COLON]         > '`' use(addmarks)
+ [K_SLASH]         > '^' use(addmarks)
+ [K_BKSLASH]       > '~' use(addmarks)
+ [SHIFT K_QUOTE]   > '´' use(addmarks)
+ [SHIFT K_COLON]   > '`' use(addmarks)
+ [SHIFT K_SLASH]   > '^' use(addmarks)
+ [SHIFT K_BKSLASH] > '~' use(addmarks)

c --- Keyman Desktop: support RALT, CAPS ---

c map all single characters, for all four shift/caps states
$keymanonly: + any(keyncaps) > index(charlower,1)
$keymanonly: + any(keycaps) > index(charupper,1)
$keymanonly: + any(keyshiftcaps) > index(charlower,1)
$keymanonly: + any(keyshiftncaps) > index(charupper,1)

$keymanonly: + any(raltn) > index(raltnchar,1)
$keymanweb: + any(ctrlaltn) > index(raltnchar,1)

c digraph
$keymanonly: + [NCAPS K_RBRKT] > 'gb'
$keymanonly: + [CAPS K_RBRKT] > 'GB'
$keymanonly: + [NCAPS SHIFT K_RBRKT] > 'Gb'
$keymanonly: + [CAPS SHIFT K_RBRKT] > 'gb'

c non-letter characters
$keymanonly: + any(ralt) > index(nonletterlower,1)
$keymanonly: + any(raltshift) > index(nonletterupper,1)

c --- KeymanWeb: no CAPS or RALT ---

c map all single characters
$keymanweb: + any(keydflt) > index(charlower,1)
$keymanweb: + any(keyshift) > index(charupper,1)

c digraph mapping
$keymanweb: + [K_RBRKT] > 'gb'
$keymanweb: + [SHIFT K_RBRKT] > 'Gb'      

c non-letter characters
$keymanweb: + any(ctlalt) > index(nonletterlower,1)
$keymanweb: + any(ctlaltshift) > index(nonletterupper,1)

c touch-layout rules
+ any(tkeyLC) > index(tcharLC,1)
+ any(tkeyUC) > index(tcharUC,1)
+ any(tkey2LC) > index(tchar2LCa,1) index(tchar2b,1)
+ any(tkey2UC) > index(tchar2UCa,1) index(tchar2b,1)

+ [T_GB]       > 'gb'
+ [SHIFT T_GB] > 'Gb'
+ [T_NAIRA]    > U+20A6
+ [T_EURO]     > U+20AC
+ [T_STERLING] > U+00A3
+ [T_YEN]      > U+00A5
+ [T_BAR]      > U+007C
+ [T_ELLIPSIS] > U+2026

c explicit space bar (should not be needed?)
$keymanonly: + any(spacekey) > U+0020

c --- handle gb/Gb/GB
match   > use(gbcase-match)
nomatch > use(gbcase-nomatch)
                                
c Add vowel marks
group(addmarks)

any(vowel) '`' > index(vowel,1) U+0300
any(mn) '`' > index(mn,1) U+0300
any(vowel) '´' > index(vowel,1) U+0301
any(mn) '´' > index(mn,1) U+0301
any(vowel) '^' > index(vowel,1) U+0302
any(vowel) '~' > index(vowel,1) U+0303
any(nn) '~' > index(nn,1) U+0303
                                      
c --- handle gb/Gb/GB
c match   > use(gbcase-match)  c -> these will never match rules
c nomatch > use(gbcase-nomatch)

group(gbcase-match)
'GB' any(charlower) > 'Gb' index(charlower,3)  
'Gb' any(charupper) > 'GB' index(charupper,3)
'gb' any(charupper) > 'GB' index(charupper,3)

group(gbcase-nomatch)
'GB' any(charlower) > 'Gb' index(charlower,3)  
'Gb' any(charupper) > 'GB' index(charupper,3)
'gb' any(charupper) > 'GB' index(charupper,3)
nomatch > use(out)
match > use(out)               

group(out) using keys
